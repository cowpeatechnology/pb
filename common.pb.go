// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: pb/proto/common.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Code int32

const (
	Code_Success             Code = 0   // 成功
	Code_MysqlErr            Code = 1   // 数据库异常
	Code_ArmyUnitNotExist    Code = 2   // 部队队伍不存在
	Code_PersonNotExist      Code = 3   // 族人不存在
	Code_GoodsNotEnough      Code = 4   // 物品数量不足
	Code_DeviceNotExist      Code = 5   // 设备不存在
	Code_MoneyNotEnough      Code = 6   // 货币不足
	Code_ArmyNotExist        Code = 7   // 部队不存在
	Code_ArmyIsBusy          Code = 8   // 部队正在执行任务
	Code_ArmyCaptainNotExist Code = 9   // 队长不存在
	Code_NotDeclareWar       Code = 11  // 未宣战
	Code_NotInWar            Code = 12  // 未开战
	Code_NotInAttackGuild    Code = 13  // 未加入进攻王国
	Code_AttackSelfGuild     Code = 14  // 不能进攻自己王国的据点
	Code_DeclareOrInWar      Code = 15  // 已宣战或处于战斗中
	Code_NoDevice            Code = 16  // 设备不存在
	Code_UnLoad              Code = 17  // 未装载设备
	Code_NoBuild             Code = 18  // 建筑不存在
	Code_NotAttackGuild      Code = 19  // 非进攻方不能主到停止
	Code_PersonIsBusy        Code = 20  // 族人正忙
	Code_MaxSoldierCount     Code = 21  // 兵力达到上限
	Code_ConfServerErr       Code = 22  // 配置服务异常
	Code_NoDrawSoulConf      Code = 23  // 没有抽取配置
	Code_MaxLevel            Code = 24  // 达到最大等级
	Code_SoulNotExist        Code = 25  // 族人不存在该契约
	Code_SoulIsLoad          Code = 26  // 契约已装载
	Code_EmptyInput          Code = 27  // 空输入
	Code_ExistPlayer         Code = 28  // 用户已创建角色
	Code_NoPlayer            Code = 29  // 用户未创建角色
	Code_NoCommodity         Code = 30  // 商品不存在
	Code_NoGift              Code = 31  // 礼包不存在
	Code_UnLoadArms          Code = 32  // 未装载武器
	Code_ArmsNotMatch        Code = 33  // 武器不匹配
	Code_TreadTeamIsBusy     Code = 34  // 贸易队忙
	Code_PlayerNotInGuild    Code = 35  // 玩家不在王国中
	Code_CommodityNotEnough  Code = 36  // 商品不足
	Code_NotInGuild          Code = 37  // 不在王国中
	Code_UpMaxCarry          Code = 38  // 达到最大载货量
	Code_NoPurchase          Code = 39  // 未收购
	Code_NoCargo             Code = 40  // 货物未找到
	Code_NotFoundPath        Code = 41  // 未找到路径
	Code_CanNotPurChase      Code = 42  // 不能购买
	Code_TeacherNotExist     Code = 43  // 老师不存在
	Code_EducateFail         Code = 44  // 培训失败，但进度会增加
	Code_DeviceLoaded        Code = 45  // 装备已装载
	Code_DeploymentNotExist  Code = 46  // 阵法不存在
	Code_LessThanLoadLevel   Code = 47  // 未达到装载等级
	Code_PointNotEnough      Code = 48  // 剩余点数不够
	Code_SkillTreeNotExist   Code = 49  // 技能树不存在
	Code_SkillTreeLayerErr   Code = 50  // 技能树层数错误
	Code_SkillTreeSkillErr   Code = 51  // 技能树ID错误
	Code_PositionExistBuild  Code = 52  // 该位置已存在建筑
	Code_UnableToBuild       Code = 53  // 无法建造
	Code_UnableToMerge       Code = 54  // 无法合并
	Code_NotPresident        Code = 55  // 非王国拥有者
	Code_GuildRelationErr    Code = 56  // 当前关系不能变更成新的关系
	Code_NoGuildApply        Code = 57  // 未找到王国申请
	Code_WordNoExist         Code = 58  // 词条不存在
	Code_CONotExist          Code = 59  // 主将不存在
	Code_Fail                Code = 100 // 失败
)

// Enum value maps for Code.
var (
	Code_name = map[int32]string{
		0:   "Success",
		1:   "MysqlErr",
		2:   "ArmyUnitNotExist",
		3:   "PersonNotExist",
		4:   "GoodsNotEnough",
		5:   "DeviceNotExist",
		6:   "MoneyNotEnough",
		7:   "ArmyNotExist",
		8:   "ArmyIsBusy",
		9:   "ArmyCaptainNotExist",
		11:  "NotDeclareWar",
		12:  "NotInWar",
		13:  "NotInAttackGuild",
		14:  "AttackSelfGuild",
		15:  "DeclareOrInWar",
		16:  "NoDevice",
		17:  "UnLoad",
		18:  "NoBuild",
		19:  "NotAttackGuild",
		20:  "PersonIsBusy",
		21:  "MaxSoldierCount",
		22:  "ConfServerErr",
		23:  "NoDrawSoulConf",
		24:  "MaxLevel",
		25:  "SoulNotExist",
		26:  "SoulIsLoad",
		27:  "EmptyInput",
		28:  "ExistPlayer",
		29:  "NoPlayer",
		30:  "NoCommodity",
		31:  "NoGift",
		32:  "UnLoadArms",
		33:  "ArmsNotMatch",
		34:  "TreadTeamIsBusy",
		35:  "PlayerNotInGuild",
		36:  "CommodityNotEnough",
		37:  "NotInGuild",
		38:  "UpMaxCarry",
		39:  "NoPurchase",
		40:  "NoCargo",
		41:  "NotFoundPath",
		42:  "CanNotPurChase",
		43:  "TeacherNotExist",
		44:  "EducateFail",
		45:  "DeviceLoaded",
		46:  "DeploymentNotExist",
		47:  "LessThanLoadLevel",
		48:  "PointNotEnough",
		49:  "SkillTreeNotExist",
		50:  "SkillTreeLayerErr",
		51:  "SkillTreeSkillErr",
		52:  "PositionExistBuild",
		53:  "UnableToBuild",
		54:  "UnableToMerge",
		55:  "NotPresident",
		56:  "GuildRelationErr",
		57:  "NoGuildApply",
		58:  "WordNoExist",
		59:  "CONotExist",
		100: "Fail",
	}
	Code_value = map[string]int32{
		"Success":             0,
		"MysqlErr":            1,
		"ArmyUnitNotExist":    2,
		"PersonNotExist":      3,
		"GoodsNotEnough":      4,
		"DeviceNotExist":      5,
		"MoneyNotEnough":      6,
		"ArmyNotExist":        7,
		"ArmyIsBusy":          8,
		"ArmyCaptainNotExist": 9,
		"NotDeclareWar":       11,
		"NotInWar":            12,
		"NotInAttackGuild":    13,
		"AttackSelfGuild":     14,
		"DeclareOrInWar":      15,
		"NoDevice":            16,
		"UnLoad":              17,
		"NoBuild":             18,
		"NotAttackGuild":      19,
		"PersonIsBusy":        20,
		"MaxSoldierCount":     21,
		"ConfServerErr":       22,
		"NoDrawSoulConf":      23,
		"MaxLevel":            24,
		"SoulNotExist":        25,
		"SoulIsLoad":          26,
		"EmptyInput":          27,
		"ExistPlayer":         28,
		"NoPlayer":            29,
		"NoCommodity":         30,
		"NoGift":              31,
		"UnLoadArms":          32,
		"ArmsNotMatch":        33,
		"TreadTeamIsBusy":     34,
		"PlayerNotInGuild":    35,
		"CommodityNotEnough":  36,
		"NotInGuild":          37,
		"UpMaxCarry":          38,
		"NoPurchase":          39,
		"NoCargo":             40,
		"NotFoundPath":        41,
		"CanNotPurChase":      42,
		"TeacherNotExist":     43,
		"EducateFail":         44,
		"DeviceLoaded":        45,
		"DeploymentNotExist":  46,
		"LessThanLoadLevel":   47,
		"PointNotEnough":      48,
		"SkillTreeNotExist":   49,
		"SkillTreeLayerErr":   50,
		"SkillTreeSkillErr":   51,
		"PositionExistBuild":  52,
		"UnableToBuild":       53,
		"UnableToMerge":       54,
		"NotPresident":        55,
		"GuildRelationErr":    56,
		"NoGuildApply":        57,
		"WordNoExist":         58,
		"CONotExist":          59,
		"Fail":                100,
	}
)

func (x Code) Enum() *Code {
	p := new(Code)
	*p = x
	return p
}

func (x Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Code) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_proto_common_proto_enumTypes[0].Descriptor()
}

func (Code) Type() protoreflect.EnumType {
	return &file_pb_proto_common_proto_enumTypes[0]
}

func (x Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Code.Descriptor instead.
func (Code) EnumDescriptor() ([]byte, []int) {
	return file_pb_proto_common_proto_rawDescGZIP(), []int{0}
}

type Gender int32

const (
	Gender_Female Gender = 0 //女性
	Gender_Male   Gender = 1 //男性
)

// Enum value maps for Gender.
var (
	Gender_name = map[int32]string{
		0: "Female",
		1: "Male",
	}
	Gender_value = map[string]int32{
		"Female": 0,
		"Male":   1,
	}
)

func (x Gender) Enum() *Gender {
	p := new(Gender)
	*p = x
	return p
}

func (x Gender) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Gender) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_proto_common_proto_enumTypes[1].Descriptor()
}

func (Gender) Type() protoreflect.EnumType {
	return &file_pb_proto_common_proto_enumTypes[1]
}

func (x Gender) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Gender.Descriptor instead.
func (Gender) EnumDescriptor() ([]byte, []int) {
	return file_pb_proto_common_proto_rawDescGZIP(), []int{1}
}

type Authority int32

const (
	Authority_President     Authority = 0   //会长
	Authority_VicePresident Authority = 1   //副会长
	Authority_Member        Authority = 100 //会员
)

// Enum value maps for Authority.
var (
	Authority_name = map[int32]string{
		0:   "President",
		1:   "VicePresident",
		100: "Member",
	}
	Authority_value = map[string]int32{
		"President":     0,
		"VicePresident": 1,
		"Member":        100,
	}
)

func (x Authority) Enum() *Authority {
	p := new(Authority)
	*p = x
	return p
}

func (x Authority) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Authority) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_proto_common_proto_enumTypes[2].Descriptor()
}

func (Authority) Type() protoreflect.EnumType {
	return &file_pb_proto_common_proto_enumTypes[2]
}

func (x Authority) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Authority.Descriptor instead.
func (Authority) EnumDescriptor() ([]byte, []int) {
	return file_pb_proto_common_proto_rawDescGZIP(), []int{2}
}

type ArmyStatus int32

const (
	ArmyStatus_Idle      ArmyStatus = 0 // 空闲
	ArmyStatus_Moving    ArmyStatus = 1 //移动中
	ArmyStatus_Combating ArmyStatus = 2 //战斗中
	ArmyStatus_Defeat    ArmyStatus = 3 //战败
)

// Enum value maps for ArmyStatus.
var (
	ArmyStatus_name = map[int32]string{
		0: "Idle",
		1: "Moving",
		2: "Combating",
		3: "Defeat",
	}
	ArmyStatus_value = map[string]int32{
		"Idle":      0,
		"Moving":    1,
		"Combating": 2,
		"Defeat":    3,
	}
)

func (x ArmyStatus) Enum() *ArmyStatus {
	p := new(ArmyStatus)
	*p = x
	return p
}

func (x ArmyStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArmyStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_proto_common_proto_enumTypes[3].Descriptor()
}

func (ArmyStatus) Type() protoreflect.EnumType {
	return &file_pb_proto_common_proto_enumTypes[3]
}

func (x ArmyStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArmyStatus.Descriptor instead.
func (ArmyStatus) EnumDescriptor() ([]byte, []int) {
	return file_pb_proto_common_proto_rawDescGZIP(), []int{3}
}

type ArmyType int32

const (
	ArmyType_DefeatArmyType ArmyType = 0 //不使用
	ArmyType_Rider          ArmyType = 1 // 骑兵
	ArmyType_Saber          ArmyType = 2 //剑兵
	ArmyType_Lancer         ArmyType = 3 //枪兵
	ArmyType_Archer         ArmyType = 4 //弓兵
)

// Enum value maps for ArmyType.
var (
	ArmyType_name = map[int32]string{
		0: "DefeatArmyType",
		1: "Rider",
		2: "Saber",
		3: "Lancer",
		4: "Archer",
	}
	ArmyType_value = map[string]int32{
		"DefeatArmyType": 0,
		"Rider":          1,
		"Saber":          2,
		"Lancer":         3,
		"Archer":         4,
	}
)

func (x ArmyType) Enum() *ArmyType {
	p := new(ArmyType)
	*p = x
	return p
}

func (x ArmyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArmyType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_proto_common_proto_enumTypes[4].Descriptor()
}

func (ArmyType) Type() protoreflect.EnumType {
	return &file_pb_proto_common_proto_enumTypes[4]
}

func (x ArmyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArmyType.Descriptor instead.
func (ArmyType) EnumDescriptor() ([]byte, []int) {
	return file_pb_proto_common_proto_rawDescGZIP(), []int{4}
}

type ArmyAction int32

const (
	ArmyAction_StandBy          ArmyAction = 0 //待命
	ArmyAction_GotoWar          ArmyAction = 1 //进攻
	ArmyAction_GotoCity         ArmyAction = 2 //回城
	ArmyAction_GotoWarNoDeclare ArmyAction = 3 //未宣战进攻
	ArmyAction_AACombating      ArmyAction = 4 //战斗中
	ArmyAction_CombatFailed     ArmyAction = 5 //战败
)

// Enum value maps for ArmyAction.
var (
	ArmyAction_name = map[int32]string{
		0: "StandBy",
		1: "GotoWar",
		2: "GotoCity",
		3: "GotoWarNoDeclare",
		4: "AACombating",
		5: "CombatFailed",
	}
	ArmyAction_value = map[string]int32{
		"StandBy":          0,
		"GotoWar":          1,
		"GotoCity":         2,
		"GotoWarNoDeclare": 3,
		"AACombating":      4,
		"CombatFailed":     5,
	}
)

func (x ArmyAction) Enum() *ArmyAction {
	p := new(ArmyAction)
	*p = x
	return p
}

func (x ArmyAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArmyAction) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_proto_common_proto_enumTypes[5].Descriptor()
}

func (ArmyAction) Type() protoreflect.EnumType {
	return &file_pb_proto_common_proto_enumTypes[5]
}

func (x ArmyAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArmyAction.Descriptor instead.
func (ArmyAction) EnumDescriptor() ([]byte, []int) {
	return file_pb_proto_common_proto_rawDescGZIP(), []int{5}
}

type DoWhat int32

const (
	DoWhat_DoNothing   DoWhat = 0 //成年:空闲
	DoWhat_Childhood   DoWhat = 1 //幼年
	DoWhat_Dead        DoWhat = 2 //死亡
	DoWhat_InArmy      DoWhat = 3 //在部队中
	DoWhat_InTradeTeam DoWhat = 4 //在贸易队中
)

// Enum value maps for DoWhat.
var (
	DoWhat_name = map[int32]string{
		0: "DoNothing",
		1: "Childhood",
		2: "Dead",
		3: "InArmy",
		4: "InTradeTeam",
	}
	DoWhat_value = map[string]int32{
		"DoNothing":   0,
		"Childhood":   1,
		"Dead":        2,
		"InArmy":      3,
		"InTradeTeam": 4,
	}
)

func (x DoWhat) Enum() *DoWhat {
	p := new(DoWhat)
	*p = x
	return p
}

func (x DoWhat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DoWhat) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_proto_common_proto_enumTypes[6].Descriptor()
}

func (DoWhat) Type() protoreflect.EnumType {
	return &file_pb_proto_common_proto_enumTypes[6]
}

func (x DoWhat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DoWhat.Descriptor instead.
func (DoWhat) EnumDescriptor() ([]byte, []int) {
	return file_pb_proto_common_proto_rawDescGZIP(), []int{6}
}

type Suitability int32

const (
	Suitability_S Suitability = 0
	Suitability_A Suitability = 1
	Suitability_B Suitability = 2
	Suitability_C Suitability = 3
	Suitability_D Suitability = 4
)

// Enum value maps for Suitability.
var (
	Suitability_name = map[int32]string{
		0: "S",
		1: "A",
		2: "B",
		3: "C",
		4: "D",
	}
	Suitability_value = map[string]int32{
		"S": 0,
		"A": 1,
		"B": 2,
		"C": 3,
		"D": 4,
	}
)

func (x Suitability) Enum() *Suitability {
	p := new(Suitability)
	*p = x
	return p
}

func (x Suitability) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Suitability) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_proto_common_proto_enumTypes[7].Descriptor()
}

func (Suitability) Type() protoreflect.EnumType {
	return &file_pb_proto_common_proto_enumTypes[7]
}

func (x Suitability) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Suitability.Descriptor instead.
func (Suitability) EnumDescriptor() ([]byte, []int) {
	return file_pb_proto_common_proto_rawDescGZIP(), []int{7}
}

type BasePlayer_Status int32

const (
	BasePlayer_Offline BasePlayer_Status = 0 //离线
	BasePlayer_Online  BasePlayer_Status = 1 //在线
)

// Enum value maps for BasePlayer_Status.
var (
	BasePlayer_Status_name = map[int32]string{
		0: "Offline",
		1: "Online",
	}
	BasePlayer_Status_value = map[string]int32{
		"Offline": 0,
		"Online":  1,
	}
)

func (x BasePlayer_Status) Enum() *BasePlayer_Status {
	p := new(BasePlayer_Status)
	*p = x
	return p
}

func (x BasePlayer_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BasePlayer_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_proto_common_proto_enumTypes[8].Descriptor()
}

func (BasePlayer_Status) Type() protoreflect.EnumType {
	return &file_pb_proto_common_proto_enumTypes[8]
}

func (x BasePlayer_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BasePlayer_Status.Descriptor instead.
func (BasePlayer_Status) EnumDescriptor() ([]byte, []int) {
	return file_pb_proto_common_proto_rawDescGZIP(), []int{1, 0}
}

type Build_Status int32

const (
	Build_Normal    Build_Status = 0 // 正常状态
	Build_Working   Build_Status = 1 // 工作中,如农业建筑,工业建筑有生产任务
	Build_Building  Build_Status = 2 // 建造中
	Build_Upgrading Build_Status = 3 // 升级中
	Build_Merging   Build_Status = 4 // 合并中
	Build_Deleted   Build_Status = 5 // 已删除
)

// Enum value maps for Build_Status.
var (
	Build_Status_name = map[int32]string{
		0: "Normal",
		1: "Working",
		2: "Building",
		3: "Upgrading",
		4: "Merging",
		5: "Deleted",
	}
	Build_Status_value = map[string]int32{
		"Normal":    0,
		"Working":   1,
		"Building":  2,
		"Upgrading": 3,
		"Merging":   4,
		"Deleted":   5,
	}
)

func (x Build_Status) Enum() *Build_Status {
	p := new(Build_Status)
	*p = x
	return p
}

func (x Build_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Build_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_proto_common_proto_enumTypes[9].Descriptor()
}

func (Build_Status) Type() protoreflect.EnumType {
	return &file_pb_proto_common_proto_enumTypes[9]
}

func (x Build_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Build_Status.Descriptor instead.
func (Build_Status) EnumDescriptor() ([]byte, []int) {
	return file_pb_proto_common_proto_rawDescGZIP(), []int{4, 0}
}

type LandTradeTeam_Action int32

const (
	LandTradeTeam_Moving     LandTradeTeam_Action = 0 //移动中
	LandTradeTeam_MeetRobber LandTradeTeam_Action = 1 //遭遇山贼
)

// Enum value maps for LandTradeTeam_Action.
var (
	LandTradeTeam_Action_name = map[int32]string{
		0: "Moving",
		1: "MeetRobber",
	}
	LandTradeTeam_Action_value = map[string]int32{
		"Moving":     0,
		"MeetRobber": 1,
	}
)

func (x LandTradeTeam_Action) Enum() *LandTradeTeam_Action {
	p := new(LandTradeTeam_Action)
	*p = x
	return p
}

func (x LandTradeTeam_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LandTradeTeam_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_proto_common_proto_enumTypes[10].Descriptor()
}

func (LandTradeTeam_Action) Type() protoreflect.EnumType {
	return &file_pb_proto_common_proto_enumTypes[10]
}

func (x LandTradeTeam_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LandTradeTeam_Action.Descriptor instead.
func (LandTradeTeam_Action) EnumDescriptor() ([]byte, []int) {
	return file_pb_proto_common_proto_rawDescGZIP(), []int{12, 0}
}

type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"code"
	Code Code `protobuf:"varint,1,opt,name=code,proto3,enum=pb.Code" json:"code"`
}

func (x *Result) Reset() {
	*x = Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_pb_proto_common_proto_rawDescGZIP(), []int{0}
}

func (x *Result) GetCode() Code {
	if x != nil {
		return x.Code
	}
	return Code_Success
}

// 角色基本信息
type BasePlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"id"
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	// @inject_tag: json:"name"
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	// @inject_tag: json:"gender"
	Gender Gender `protobuf:"varint,3,opt,name=gender,proto3,enum=pb.Gender" json:"gender"`
	// @inject_tag: json:"avatar_id"
	AvatarId int32 `protobuf:"varint,4,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id"`
	// @inject_tag: json:"status"
	Status BasePlayer_Status `protobuf:"varint,5,opt,name=status,proto3,enum=pb.BasePlayer_Status" json:"status"`
	// @inject_tag: json:"combat"
	Combat int32 `protobuf:"varint,6,opt,name=combat,proto3" json:"combat"`
	// @inject_tag: json:"trade"
	Trade int32 `protobuf:"varint,7,opt,name=trade,proto3" json:"trade"`
	// @inject_tag: json:"chapter_id"
	ChapterId int32 `protobuf:"varint,8,opt,name=chapter_id,json=chapterId,proto3" json:"chapter_id"` //章节ID
	// @inject_tag: json:"battle_id"
	BattleId int32 `protobuf:"varint,9,opt,name=battle_id,json=battleId,proto3" json:"battle_id"` //关卡ID
	// @inject_tag: json:"im"
	Im *IMData `protobuf:"bytes,10,opt,name=im,proto3" json:"im"`
}

func (x *BasePlayer) Reset() {
	*x = BasePlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasePlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasePlayer) ProtoMessage() {}

func (x *BasePlayer) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasePlayer.ProtoReflect.Descriptor instead.
func (*BasePlayer) Descriptor() ([]byte, []int) {
	return file_pb_proto_common_proto_rawDescGZIP(), []int{1}
}

func (x *BasePlayer) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BasePlayer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BasePlayer) GetGender() Gender {
	if x != nil {
		return x.Gender
	}
	return Gender_Female
}

func (x *BasePlayer) GetAvatarId() int32 {
	if x != nil {
		return x.AvatarId
	}
	return 0
}

func (x *BasePlayer) GetStatus() BasePlayer_Status {
	if x != nil {
		return x.Status
	}
	return BasePlayer_Offline
}

func (x *BasePlayer) GetCombat() int32 {
	if x != nil {
		return x.Combat
	}
	return 0
}

func (x *BasePlayer) GetTrade() int32 {
	if x != nil {
		return x.Trade
	}
	return 0
}

func (x *BasePlayer) GetChapterId() int32 {
	if x != nil {
		return x.ChapterId
	}
	return 0
}

func (x *BasePlayer) GetBattleId() int32 {
	if x != nil {
		return x.BattleId
	}
	return 0
}

func (x *BasePlayer) GetIm() *IMData {
	if x != nil {
		return x.Im
	}
	return nil
}

// 王国信息
type Guild struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"id"
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	// @inject_tag: json:"icon"
	Icon int32 `protobuf:"varint,2,opt,name=icon,proto3" json:"icon"` //标志
	// @inject_tag: json:"name"
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name"` //名称
	// @inject_tag: json:"content"
	Content string `protobuf:"bytes,4,opt,name=content,proto3" json:"content"` //说明
	// @inject_tag: json:"level"
	Level int32 `protobuf:"varint,5,opt,name=level,proto3" json:"level"` //等级
	// @inject_tag: json:"members"
	Members int32 `protobuf:"varint,6,opt,name=members,proto3" json:"members"` //成员数
	// @inject_tag: json:"max_members"
	MaxMembers int32 `protobuf:"varint,7,opt,name=max_members,json=maxMembers,proto3" json:"max_members"` //最大成员数
	// @inject_tag: json:"combat"
	Combat int64 `protobuf:"varint,8,opt,name=combat,proto3" json:"combat"` //战斗力
	// @inject_tag: json:"apply_combat"
	ApplyCombat int32 `protobuf:"varint,9,opt,name=apply_combat,json=applyCombat,proto3" json:"apply_combat"` //申请时的战功限制
	// @inject_tag: json:"apply_trade"
	ApplyTrade int32 `protobuf:"varint,10,opt,name=apply_trade,json=applyTrade,proto3" json:"apply_trade"` //申请时的贸易值限制
	// @inject_tag: json:"im_group"
	ImGroup string `protobuf:"bytes,11,opt,name=im_group,json=imGroup,proto3" json:"im_group"` //聊天群
}

func (x *Guild) Reset() {
	*x = Guild{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Guild) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Guild) ProtoMessage() {}

func (x *Guild) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Guild.ProtoReflect.Descriptor instead.
func (*Guild) Descriptor() ([]byte, []int) {
	return file_pb_proto_common_proto_rawDescGZIP(), []int{2}
}

func (x *Guild) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Guild) GetIcon() int32 {
	if x != nil {
		return x.Icon
	}
	return 0
}

func (x *Guild) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Guild) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Guild) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *Guild) GetMembers() int32 {
	if x != nil {
		return x.Members
	}
	return 0
}

func (x *Guild) GetMaxMembers() int32 {
	if x != nil {
		return x.MaxMembers
	}
	return 0
}

func (x *Guild) GetCombat() int64 {
	if x != nil {
		return x.Combat
	}
	return 0
}

func (x *Guild) GetApplyCombat() int32 {
	if x != nil {
		return x.ApplyCombat
	}
	return 0
}

func (x *Guild) GetApplyTrade() int32 {
	if x != nil {
		return x.ApplyTrade
	}
	return 0
}

func (x *Guild) GetImGroup() string {
	if x != nil {
		return x.ImGroup
	}
	return ""
}

// 王国成员详情
type GuildMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"player "
	Player *BasePlayer `protobuf:"bytes,1,opt,name=player,proto3" json:"player"`
	// @inject_tag: json:"authority"
	Authority Authority `protobuf:"varint,2,opt,name=authority,proto3,enum=pb.Authority" json:"authority"`
	// @inject_tag: json:"contribute"
	Contribute int32 `protobuf:"varint,3,opt,name=contribute,proto3" json:"contribute"`
}

func (x *GuildMember) Reset() {
	*x = GuildMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildMember) ProtoMessage() {}

func (x *GuildMember) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildMember.ProtoReflect.Descriptor instead.
func (*GuildMember) Descriptor() ([]byte, []int) {
	return file_pb_proto_common_proto_rawDescGZIP(), []int{3}
}

func (x *GuildMember) GetPlayer() *BasePlayer {
	if x != nil {
		return x.Player
	}
	return nil
}

func (x *GuildMember) GetAuthority() Authority {
	if x != nil {
		return x.Authority
	}
	return Authority_President
}

func (x *GuildMember) GetContribute() int32 {
	if x != nil {
		return x.Contribute
	}
	return 0
}

type Build struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"id"
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	// @inject_tag: json:"build_id"
	BuildId int32 `protobuf:"varint,2,opt,name=build_id,json=buildId,proto3" json:"build_id"`
	// @inject_tag: json:"type"
	Type int32 `protobuf:"varint,3,opt,name=type,proto3" json:"type"`
	// @inject_tag: json:"sub_type"
	SubType int32 `protobuf:"varint,4,opt,name=sub_type,json=subType,proto3" json:"sub_type"`
	// @inject_tag: json:"level"
	Level int32 `protobuf:"varint,5,opt,name=level,proto3" json:"level"`
	// @inject_tag: json:"durability"
	Durability int32 `protobuf:"varint,6,opt,name=durability,proto3" json:"durability"` //耐久度满级
	// @inject_tag: json:"poses"
	Poses []int32 `protobuf:"varint,7,rep,packed,name=poses,proto3" json:"poses"`
	// @inject_tag: json:"guild_id"
	GuildId int32 `protobuf:"varint,8,opt,name=guild_id,json=guildId,proto3" json:"guild_id"`
	// @inject_tag: json:"status"
	Status Build_Status `protobuf:"varint,9,opt,name=status,proto3,enum=pb.Build_Status" json:"status"`
	// @inject_tag: json:"need_time"
	NeedTime int32 `protobuf:"varint,10,opt,name=need_time,json=needTime,proto3" json:"need_time"` // 变更状态所需时间，0-表示瞬间完成
	// @inject_tag: json:"pass_time"
	StartTime int64 `protobuf:"varint,11,opt,name=start_time,json=startTime,proto3" json:"start_time"` // 变更状态开始时间戳
}

func (x *Build) Reset() {
	*x = Build{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Build) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Build) ProtoMessage() {}

func (x *Build) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Build.ProtoReflect.Descriptor instead.
func (*Build) Descriptor() ([]byte, []int) {
	return file_pb_proto_common_proto_rawDescGZIP(), []int{4}
}

func (x *Build) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Build) GetBuildId() int32 {
	if x != nil {
		return x.BuildId
	}
	return 0
}

func (x *Build) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Build) GetSubType() int32 {
	if x != nil {
		return x.SubType
	}
	return 0
}

func (x *Build) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *Build) GetDurability() int32 {
	if x != nil {
		return x.Durability
	}
	return 0
}

func (x *Build) GetPoses() []int32 {
	if x != nil {
		return x.Poses
	}
	return nil
}

func (x *Build) GetGuildId() int32 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *Build) GetStatus() Build_Status {
	if x != nil {
		return x.Status
	}
	return Build_Normal
}

func (x *Build) GetNeedTime() int32 {
	if x != nil {
		return x.NeedTime
	}
	return 0
}

func (x *Build) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

type GoodsCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"goods_id"
	GoodsId int32 `protobuf:"varint,1,opt,name=goods_id,json=goodsId,proto3" json:"goods_id"`
	// @inject_tag: json:"count"
	Count int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count"`
}

func (x *GoodsCount) Reset() {
	*x = GoodsCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoodsCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodsCount) ProtoMessage() {}

func (x *GoodsCount) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodsCount.ProtoReflect.Descriptor instead.
func (*GoodsCount) Descriptor() ([]byte, []int) {
	return file_pb_proto_common_proto_rawDescGZIP(), []int{5}
}

func (x *GoodsCount) GetGoodsId() int32 {
	if x != nil {
		return x.GoodsId
	}
	return 0
}

func (x *GoodsCount) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type Money struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"type"
	Type int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type"` //货币类型（0-钻石，1-金币）
	// @inject_tag: json:"count"
	Count int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count"` //数量
}

func (x *Money) Reset() {
	*x = Money{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Money) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Money) ProtoMessage() {}

func (x *Money) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Money.ProtoReflect.Descriptor instead.
func (*Money) Descriptor() ([]byte, []int) {
	return file_pb_proto_common_proto_rawDescGZIP(), []int{6}
}

func (x *Money) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Money) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type GuildCombat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"id"
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	// @inject_tag: json:"pos"
	Pos int32 `protobuf:"varint,2,opt,name=pos,proto3" json:"pos"`
	// @inject_tag: json:"attack_id"
	AttackId int32 `protobuf:"varint,3,opt,name=attack_id,json=attackId,proto3" json:"attack_id"`
	// @inject_tag: json:"defence_id"
	DefenceId int32 `protobuf:"varint,4,opt,name=defence_id,json=defenceId,proto3" json:"defence_id"`
	// @inject_tag: json:"build_id"
	BuildId int32 `protobuf:"varint,5,opt,name=build_id,json=buildId,proto3" json:"build_id"`
	// @inject_tag: json:"result"
	Result int32 `protobuf:"varint,6,opt,name=result,proto3" json:"result"` //战斗结果(0-防守方胜利，1-进攻方胜利）
	// @inject_tag: json:"status"
	Status int32 `protobuf:"varint,7,opt,name=status,proto3" json:"status"` // 0-无战事，1-宣战，2-战斗中
	// @inject_tag: json:"update_at"
	UpdateAt int64 `protobuf:"varint,8,opt,name=update_at,json=updateAt,proto3" json:"update_at"`
	// @inject_tag: json:"need_time"
	NeedTime int32 `protobuf:"varint,9,opt,name=need_time,json=needTime,proto3" json:"need_time"`
}

func (x *GuildCombat) Reset() {
	*x = GuildCombat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildCombat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildCombat) ProtoMessage() {}

func (x *GuildCombat) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildCombat.ProtoReflect.Descriptor instead.
func (*GuildCombat) Descriptor() ([]byte, []int) {
	return file_pb_proto_common_proto_rawDescGZIP(), []int{7}
}

func (x *GuildCombat) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GuildCombat) GetPos() int32 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *GuildCombat) GetAttackId() int32 {
	if x != nil {
		return x.AttackId
	}
	return 0
}

func (x *GuildCombat) GetDefenceId() int32 {
	if x != nil {
		return x.DefenceId
	}
	return 0
}

func (x *GuildCombat) GetBuildId() int32 {
	if x != nil {
		return x.BuildId
	}
	return 0
}

func (x *GuildCombat) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *GuildCombat) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GuildCombat) GetUpdateAt() int64 {
	if x != nil {
		return x.UpdateAt
	}
	return 0
}

func (x *GuildCombat) GetNeedTime() int32 {
	if x != nil {
		return x.NeedTime
	}
	return 0
}

type Army struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"id"
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	// @inject_tag: json:"player_id"
	PlayerId int64 `protobuf:"varint,2,opt,name=player_id,json=playerId,proto3" json:"player_id"`
	// @inject_tag: json:"name"
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name"`
	// @inject_tag: json:"status"
	Status ArmyStatus `protobuf:"varint,4,opt,name=status,proto3,enum=pb.ArmyStatus" json:"status"`
	// @inject_tag: json:"pos"
	Pos int32 `protobuf:"varint,5,opt,name=pos,proto3" json:"pos"`
	// @inject_tag: json:"update_at"
	UpdateAt int64 `protobuf:"varint,6,opt,name=update_at,json=updateAt,proto3" json:"update_at"`
	// @inject_tag: json:"need_time"
	NeedTime int32 `protobuf:"varint,7,opt,name=need_time,json=needTime,proto3" json:"need_time"`
	// @inject_tag: json:"person"
	Person       *Person  `protobuf:"bytes,8,opt,name=person,proto3" json:"person"`                                       // 主将
	ArmyType     ArmyType `protobuf:"varint,9,opt,name=army_type,json=armyType,proto3,enum=pb.ArmyType" json:"army_type"` //1	骑兵 	2	剑兵 	3	枪兵 	4	弓兵
	SoldierCount int32    `protobuf:"varint,10,opt,name=soldier_count,json=soldierCount,proto3" json:"soldier_count"`
}

func (x *Army) Reset() {
	*x = Army{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_common_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Army) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Army) ProtoMessage() {}

func (x *Army) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_common_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Army.ProtoReflect.Descriptor instead.
func (*Army) Descriptor() ([]byte, []int) {
	return file_pb_proto_common_proto_rawDescGZIP(), []int{8}
}

func (x *Army) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Army) GetPlayerId() int64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *Army) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Army) GetStatus() ArmyStatus {
	if x != nil {
		return x.Status
	}
	return ArmyStatus_Idle
}

func (x *Army) GetPos() int32 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *Army) GetUpdateAt() int64 {
	if x != nil {
		return x.UpdateAt
	}
	return 0
}

func (x *Army) GetNeedTime() int32 {
	if x != nil {
		return x.NeedTime
	}
	return 0
}

func (x *Army) GetPerson() *Person {
	if x != nil {
		return x.Person
	}
	return nil
}

func (x *Army) GetArmyType() ArmyType {
	if x != nil {
		return x.ArmyType
	}
	return ArmyType_DefeatArmyType
}

func (x *Army) GetSoldierCount() int32 {
	if x != nil {
		return x.SoldierCount
	}
	return 0
}

type ArmyUnit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"army_id"
	ArmyId int64 `protobuf:"varint,1,opt,name=army_id,json=armyId,proto3" json:"army_id"`
	// @inject_tag: json:"pos"
	Pos int32 `protobuf:"varint,2,opt,name=pos,proto3" json:"pos"` //位置（1,2,3)
	// @inject_tag: json:"person"
	Person *PersonInfo `protobuf:"bytes,3,opt,name=person,proto3" json:"person"`
	// @inject_tag: json:"soldier_count"
	SoldierCount int32 `protobuf:"varint,4,opt,name=soldier_count,json=soldierCount,proto3" json:"soldier_count"`
	// @inject_tag: json:"attack"
	Attack int32 `protobuf:"varint,5,opt,name=attack,proto3" json:"attack"`
	// @inject_tag: json:"defense"
	Defense int32 `protobuf:"varint,6,opt,name=defense,proto3" json:"defense"`
	// @inject_tag: json:"siege_value"
	SiegeValue int32 `protobuf:"varint,7,opt,name=siege_value,json=siegeValue,proto3" json:"siege_value"`
	// @inject_tag: json:"move_speed"
	MoveSpeed int32 `protobuf:"varint,8,opt,name=move_speed,json=moveSpeed,proto3" json:"move_speed"`
	// @inject_tag: json:"devices"
	Devices *Devices `protobuf:"bytes,9,opt,name=devices,proto3" json:"devices"`
}

func (x *ArmyUnit) Reset() {
	*x = ArmyUnit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_common_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArmyUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArmyUnit) ProtoMessage() {}

func (x *ArmyUnit) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_common_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArmyUnit.ProtoReflect.Descriptor instead.
func (*ArmyUnit) Descriptor() ([]byte, []int) {
	return file_pb_proto_common_proto_rawDescGZIP(), []int{9}
}

func (x *ArmyUnit) GetArmyId() int64 {
	if x != nil {
		return x.ArmyId
	}
	return 0
}

func (x *ArmyUnit) GetPos() int32 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *ArmyUnit) GetPerson() *PersonInfo {
	if x != nil {
		return x.Person
	}
	return nil
}

func (x *ArmyUnit) GetSoldierCount() int32 {
	if x != nil {
		return x.SoldierCount
	}
	return 0
}

func (x *ArmyUnit) GetAttack() int32 {
	if x != nil {
		return x.Attack
	}
	return 0
}

func (x *ArmyUnit) GetDefense() int32 {
	if x != nil {
		return x.Defense
	}
	return 0
}

func (x *ArmyUnit) GetSiegeValue() int32 {
	if x != nil {
		return x.SiegeValue
	}
	return 0
}

func (x *ArmyUnit) GetMoveSpeed() int32 {
	if x != nil {
		return x.MoveSpeed
	}
	return 0
}

func (x *ArmyUnit) GetDevices() *Devices {
	if x != nil {
		return x.Devices
	}
	return nil
}

type MoveInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"from_pos"
	FromPos int32 `protobuf:"varint,1,opt,name=from_pos,json=fromPos,proto3" json:"from_pos"` //出发位置
	// @inject_tag: json:"to_pos"
	ToPos int32 `protobuf:"varint,2,opt,name=to_pos,json=toPos,proto3" json:"to_pos"` //目的地位置
	// @inject_tag: json:"current_pos"
	CurrentPos int32 `protobuf:"varint,3,opt,name=current_pos,json=currentPos,proto3" json:"current_pos"` //当前位置
	// @inject_tag: json:"move_speed"
	MoveSpeed int32 `protobuf:"varint,4,opt,name=move_speed,json=moveSpeed,proto3" json:"move_speed"` //移动速度
	// @inject_tag: json:"path"
	Path []int32 `protobuf:"varint,5,rep,packed,name=path,proto3" json:"path"` //路径
}

func (x *MoveInfo) Reset() {
	*x = MoveInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_common_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveInfo) ProtoMessage() {}

func (x *MoveInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_common_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveInfo.ProtoReflect.Descriptor instead.
func (*MoveInfo) Descriptor() ([]byte, []int) {
	return file_pb_proto_common_proto_rawDescGZIP(), []int{10}
}

func (x *MoveInfo) GetFromPos() int32 {
	if x != nil {
		return x.FromPos
	}
	return 0
}

func (x *MoveInfo) GetToPos() int32 {
	if x != nil {
		return x.ToPos
	}
	return 0
}

func (x *MoveInfo) GetCurrentPos() int32 {
	if x != nil {
		return x.CurrentPos
	}
	return 0
}

func (x *MoveInfo) GetMoveSpeed() int32 {
	if x != nil {
		return x.MoveSpeed
	}
	return 0
}

func (x *MoveInfo) GetPath() []int32 {
	if x != nil {
		return x.Path
	}
	return nil
}

type LandArmy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"army_id"
	ArmyId int64  `protobuf:"varint,1,opt,name=army_id,json=armyId,proto3" json:"army_id"` //部队ID
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`                    //名称
	// @inject_tag: json:"action"
	Action ArmyAction `protobuf:"varint,3,opt,name=action,proto3,enum=pb.ArmyAction" json:"action"` // 1-出征，2-回城
	// @inject_tag: json:"move"
	Move    *MoveInfo `protobuf:"bytes,4,opt,name=move,proto3" json:"move"` //移动信息
	GuildId int64     `protobuf:"varint,5,opt,name=GuildId,proto3" json:"GuildId"`
}

func (x *LandArmy) Reset() {
	*x = LandArmy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_common_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LandArmy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LandArmy) ProtoMessage() {}

func (x *LandArmy) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_common_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LandArmy.ProtoReflect.Descriptor instead.
func (*LandArmy) Descriptor() ([]byte, []int) {
	return file_pb_proto_common_proto_rawDescGZIP(), []int{11}
}

func (x *LandArmy) GetArmyId() int64 {
	if x != nil {
		return x.ArmyId
	}
	return 0
}

func (x *LandArmy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LandArmy) GetAction() ArmyAction {
	if x != nil {
		return x.Action
	}
	return ArmyAction_StandBy
}

func (x *LandArmy) GetMove() *MoveInfo {
	if x != nil {
		return x.Move
	}
	return nil
}

func (x *LandArmy) GetGuildId() int64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

type LandTradeTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"player_id"
	PlayerId int64 `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id"` //玩家ID
	// @inject_tag: json:"move"
	Move *MoveInfo `protobuf:"bytes,2,opt,name=move,proto3" json:"move"` //移动信息
	// @inject_tag: json:"action"
	Action LandTradeTeam_Action `protobuf:"varint,3,opt,name=action,proto3,enum=pb.LandTradeTeam_Action" json:"action"` //贸易队状态
}

func (x *LandTradeTeam) Reset() {
	*x = LandTradeTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_common_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LandTradeTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LandTradeTeam) ProtoMessage() {}

func (x *LandTradeTeam) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_common_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LandTradeTeam.ProtoReflect.Descriptor instead.
func (*LandTradeTeam) Descriptor() ([]byte, []int) {
	return file_pb_proto_common_proto_rawDescGZIP(), []int{12}
}

func (x *LandTradeTeam) GetPlayerId() int64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *LandTradeTeam) GetMove() *MoveInfo {
	if x != nil {
		return x.Move
	}
	return nil
}

func (x *LandTradeTeam) GetAction() LandTradeTeam_Action {
	if x != nil {
		return x.Action
	}
	return LandTradeTeam_Moving
}

type Person struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"id"
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"` // ID
	// @inject_tag: json:"parent_id"
	ParentId int64 `protobuf:"varint,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id"` //父辈
	// @inject_tag: json:"player_id"
	PlayerId int64 `protobuf:"varint,3,opt,name=player_id,json=playerId,proto3" json:"player_id"` //账号
	// @inject_tag: json:"name"
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name"` //名称
	// @inject_tag: json:"dna"
	Dna string `protobuf:"bytes,5,opt,name=dna,proto3" json:"dna"` // DNA
	// @inject_tag: json:"race"
	Race int32 `protobuf:"varint,6,opt,name=race,proto3" json:"race"` //种族
	// @inject_tag: json:"quality"
	Quality int32 `protobuf:"varint,7,opt,name=quality,proto3" json:"quality"` //品质
	// @inject_tag: json:"level"
	Level int32 `protobuf:"varint,8,opt,name=level,proto3" json:"level"` //等级
	// @inject_tag: json:"do_what"
	DoWhat DoWhat `protobuf:"varint,9,opt,name=do_what,json=doWhat,proto3,enum=pb.DoWhat" json:"do_what"` //状态
	// @inject_tag: json:"devices"
	Devices *PersonDevice `protobuf:"bytes,10,opt,name=devices,proto3" json:"devices"` //族人装备
}

func (x *Person) Reset() {
	*x = Person{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_common_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Person) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Person) ProtoMessage() {}

func (x *Person) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_common_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Person.ProtoReflect.Descriptor instead.
func (*Person) Descriptor() ([]byte, []int) {
	return file_pb_proto_common_proto_rawDescGZIP(), []int{13}
}

func (x *Person) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Person) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *Person) GetPlayerId() int64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *Person) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Person) GetDna() string {
	if x != nil {
		return x.Dna
	}
	return ""
}

func (x *Person) GetRace() int32 {
	if x != nil {
		return x.Race
	}
	return 0
}

func (x *Person) GetQuality() int32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

func (x *Person) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *Person) GetDoWhat() DoWhat {
	if x != nil {
		return x.DoWhat
	}
	return DoWhat_DoNothing
}

func (x *Person) GetDevices() *PersonDevice {
	if x != nil {
		return x.Devices
	}
	return nil
}

type PersonDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"devices"
	Devices map[int32]*PlayerGoods `protobuf:"bytes,3,rep,name=devices,proto3" json:"devices" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //装备:key-装备槽,value-装备
}

func (x *PersonDevice) Reset() {
	*x = PersonDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_common_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersonDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonDevice) ProtoMessage() {}

func (x *PersonDevice) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_common_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonDevice.ProtoReflect.Descriptor instead.
func (*PersonDevice) Descriptor() ([]byte, []int) {
	return file_pb_proto_common_proto_rawDescGZIP(), []int{14}
}

func (x *PersonDevice) GetDevices() map[int32]*PlayerGoods {
	if x != nil {
		return x.Devices
	}
	return nil
}

type PersonProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"birthday"
	Birthday int64 `protobuf:"varint,1,opt,name=birthday,proto3" json:"birthday"` //生日:培养成年的时长
	// @inject_tag: json:"birth_rate"
	BirthRate int32 `protobuf:"varint,2,opt,name=birth_rate,json=birthRate,proto3" json:"birth_rate"` //生育概率
	// @inject_tag: json:"generation"
	Generation int32 `protobuf:"varint,3,opt,name=generation,proto3" json:"generation"` //第几代族人，从0开始
	// @inject_tag: json:"exp"
	Exp int32 `protobuf:"varint,4,opt,name=exp,proto3" json:"exp"` //经验
	// @inject_tag: json:"spirit"
	Spirit int32 `protobuf:"varint,5,opt,name=spirit,proto3" json:"spirit"` //体力
	// @inject_tag: json:"spirit_update_at"
	SpiritUpdateAt int64 `protobuf:"varint,6,opt,name=spirit_update_at,json=spiritUpdateAt,proto3" json:"spirit_update_at"` //体力更新时间
	// @inject_tag: json:"combat"
	Combat int32 `protobuf:"varint,7,opt,name=combat,proto3" json:"combat"` //战力
	// @inject_tag: json:"educate_progress"
	EducateProgress int32 `protobuf:"varint,8,opt,name=educate_progress,json=educateProgress,proto3" json:"educate_progress"` //培养进度
	// @inject_tag: json:"max_level"
	MaxLevel int32 `protobuf:"varint,9,opt,name=max_level,json=maxLevel,proto3" json:"max_level"` //最大等级
	// @inject_tag: json:"upgrade_exp"
	UpgradeExp int32 `protobuf:"varint,10,opt,name=upgrade_exp,json=upgradeExp,proto3" json:"upgrade_exp"` //升级所需经验
	// @inject_tag: json:"point"
	Point int32 `protobuf:"varint,11,opt,name=point,proto3" json:"point"` //可加点数
	// @inject_tag: json:"point_properties"
	PointProperties map[int32]float32 `protobuf:"bytes,12,rep,name=point_properties,json=pointProperties,proto3" json:"point_properties" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"` //单独记录的加点属性
	// @inject_tag: json:"arms"
	Arms map[int32]*KeyFloatValues `protobuf:"bytes,13,rep,name=arms,proto3" json:"arms" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //兵种属性: key-兵种，val<属性类型:值>
	// @inject_tag: json:"properties"
	Properties map[int32]float32 `protobuf:"bytes,14,rep,name=properties,proto3" json:"properties" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"` //属性
	// @inject_tag: json:"words"
	Words map[int32]*Word `protobuf:"bytes,15,rep,name=words,proto3" json:"words" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //词条(特质)
	// @inject_tag: json:"inherit_word"
	InheritWord int32 `protobuf:"varint,16,opt,name=inherit_word,json=inheritWord,proto3" json:"inherit_word"` //传承词条
	// @inject_tag: json:"load_souls"
	LoadSouls map[int32]*LoadSoul `protobuf:"bytes,17,rep,name=load_souls,json=loadSouls,proto3" json:"load_souls" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //装载的契约
	// @inject_tag: json:"skill_trees"
	SkillTrees map[int32]*SkillTree `protobuf:"bytes,18,rep,name=skill_trees,json=skillTrees,proto3" json:"skill_trees" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //技能树
	// @inject_tag: json:"ratios"
	Ratios map[int32]int32 `protobuf:"bytes,19,rep,name=ratios,proto3" json:"ratios" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` //系数
	// @inject_tag: json:"extra"
	Extra map[int32]float32 `protobuf:"bytes,20,rep,name=extra,proto3" json:"extra" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"` //属性加成汇总
	// @inject_tag: json:"load_skills"
	LoadSkills map[int32]*LoadSkill `protobuf:"bytes,21,rep,name=load_skills,json=loadSkills,proto3" json:"load_skills" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //装载的技能
	// @inject_tag: json:"suitability_of_arms"
	SuitabilityOfArms map[int32]Suitability `protobuf:"bytes,22,rep,name=suitability_of_arms,json=suitabilityOfArms,proto3" json:"suitability_of_arms" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=pb.Suitability"` //兵种属性: key-ArmyType兵种，val<适应性>
}

func (x *PersonProperty) Reset() {
	*x = PersonProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_common_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersonProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonProperty) ProtoMessage() {}

func (x *PersonProperty) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_common_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonProperty.ProtoReflect.Descriptor instead.
func (*PersonProperty) Descriptor() ([]byte, []int) {
	return file_pb_proto_common_proto_rawDescGZIP(), []int{15}
}

func (x *PersonProperty) GetBirthday() int64 {
	if x != nil {
		return x.Birthday
	}
	return 0
}

func (x *PersonProperty) GetBirthRate() int32 {
	if x != nil {
		return x.BirthRate
	}
	return 0
}

func (x *PersonProperty) GetGeneration() int32 {
	if x != nil {
		return x.Generation
	}
	return 0
}

func (x *PersonProperty) GetExp() int32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *PersonProperty) GetSpirit() int32 {
	if x != nil {
		return x.Spirit
	}
	return 0
}

func (x *PersonProperty) GetSpiritUpdateAt() int64 {
	if x != nil {
		return x.SpiritUpdateAt
	}
	return 0
}

func (x *PersonProperty) GetCombat() int32 {
	if x != nil {
		return x.Combat
	}
	return 0
}

func (x *PersonProperty) GetEducateProgress() int32 {
	if x != nil {
		return x.EducateProgress
	}
	return 0
}

func (x *PersonProperty) GetMaxLevel() int32 {
	if x != nil {
		return x.MaxLevel
	}
	return 0
}

func (x *PersonProperty) GetUpgradeExp() int32 {
	if x != nil {
		return x.UpgradeExp
	}
	return 0
}

func (x *PersonProperty) GetPoint() int32 {
	if x != nil {
		return x.Point
	}
	return 0
}

func (x *PersonProperty) GetPointProperties() map[int32]float32 {
	if x != nil {
		return x.PointProperties
	}
	return nil
}

func (x *PersonProperty) GetArms() map[int32]*KeyFloatValues {
	if x != nil {
		return x.Arms
	}
	return nil
}

func (x *PersonProperty) GetProperties() map[int32]float32 {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *PersonProperty) GetWords() map[int32]*Word {
	if x != nil {
		return x.Words
	}
	return nil
}

func (x *PersonProperty) GetInheritWord() int32 {
	if x != nil {
		return x.InheritWord
	}
	return 0
}

func (x *PersonProperty) GetLoadSouls() map[int32]*LoadSoul {
	if x != nil {
		return x.LoadSouls
	}
	return nil
}

func (x *PersonProperty) GetSkillTrees() map[int32]*SkillTree {
	if x != nil {
		return x.SkillTrees
	}
	return nil
}

func (x *PersonProperty) GetRatios() map[int32]int32 {
	if x != nil {
		return x.Ratios
	}
	return nil
}

func (x *PersonProperty) GetExtra() map[int32]float32 {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *PersonProperty) GetLoadSkills() map[int32]*LoadSkill {
	if x != nil {
		return x.LoadSkills
	}
	return nil
}

func (x *PersonProperty) GetSuitabilityOfArms() map[int32]Suitability {
	if x != nil {
		return x.SuitabilityOfArms
	}
	return nil
}

type Word struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"name"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name"` //名称
	// @inject_tag: json:"type"
	Type int32 `protobuf:"varint,2,opt,name=type,proto3" json:"type"` //类型：将领，士兵，军事
	// @inject_tag: json:"sub_type"
	SubType int32 `protobuf:"varint,3,opt,name=sub_type,json=subType,proto3" json:"sub_type"` //对象：全种族，人族，全兵系，枪兵……
	// @inject_tag: json:"quality"
	Quality int32 `protobuf:"varint,4,opt,name=quality,proto3" json:"quality"` //品质
	// @inject_tag: json:"ratio"
	Ratio bool `protobuf:"varint,5,opt,name=ratio,proto3" json:"ratio"` // true:按比例加成（万分比）,false:按数值加成
	// @inject_tag: json:"properties"
	Properties map[int32]float32 `protobuf:"bytes,6,rep,name=properties,proto3" json:"properties" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"` //属性
}

func (x *Word) Reset() {
	*x = Word{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_common_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Word) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Word) ProtoMessage() {}

func (x *Word) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_common_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Word.ProtoReflect.Descriptor instead.
func (*Word) Descriptor() ([]byte, []int) {
	return file_pb_proto_common_proto_rawDescGZIP(), []int{16}
}

func (x *Word) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Word) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Word) GetSubType() int32 {
	if x != nil {
		return x.SubType
	}
	return 0
}

func (x *Word) GetQuality() int32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

func (x *Word) GetRatio() bool {
	if x != nil {
		return x.Ratio
	}
	return false
}

func (x *Word) GetProperties() map[int32]float32 {
	if x != nil {
		return x.Properties
	}
	return nil
}

type LoadSoul struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"load_level"
	LoadLevel int32 `protobuf:"varint,1,opt,name=load_level,json=loadLevel,proto3" json:"load_level"` //加载族人等级
	// @inject_tag: json:"soul_id"
	SoulId int32 `protobuf:"varint,2,opt,name=soul_id,json=soulId,proto3" json:"soul_id"` //契约Id
	// @inject_tag: json:"soul_level"
	SoulLevel int32 `protobuf:"varint,3,opt,name=soul_level,json=soulLevel,proto3" json:"soul_level"` //契约等级
}

func (x *LoadSoul) Reset() {
	*x = LoadSoul{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_common_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadSoul) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadSoul) ProtoMessage() {}

func (x *LoadSoul) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_common_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadSoul.ProtoReflect.Descriptor instead.
func (*LoadSoul) Descriptor() ([]byte, []int) {
	return file_pb_proto_common_proto_rawDescGZIP(), []int{17}
}

func (x *LoadSoul) GetLoadLevel() int32 {
	if x != nil {
		return x.LoadLevel
	}
	return 0
}

func (x *LoadSoul) GetSoulId() int32 {
	if x != nil {
		return x.SoulId
	}
	return 0
}

func (x *LoadSoul) GetSoulLevel() int32 {
	if x != nil {
		return x.SoulLevel
	}
	return 0
}

type LoadSkill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"skill_id"
	SkillId int32 `protobuf:"varint,2,opt,name=skill_id,json=skillId,proto3" json:"skill_id"` //技能Id
	// @inject_tag: json:"skill_level"
	SkillLevel int32 `protobuf:"varint,3,opt,name=skill_level,json=skillLevel,proto3" json:"skill_level"` //技能等级
}

func (x *LoadSkill) Reset() {
	*x = LoadSkill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_common_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadSkill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadSkill) ProtoMessage() {}

func (x *LoadSkill) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_common_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadSkill.ProtoReflect.Descriptor instead.
func (*LoadSkill) Descriptor() ([]byte, []int) {
	return file_pb_proto_common_proto_rawDescGZIP(), []int{18}
}

func (x *LoadSkill) GetSkillId() int32 {
	if x != nil {
		return x.SkillId
	}
	return 0
}

func (x *LoadSkill) GetSkillLevel() int32 {
	if x != nil {
		return x.SkillLevel
	}
	return 0
}

type SkillTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"exp"
	Exp int32 `protobuf:"varint,1,opt,name=exp,proto3" json:"exp"`
	// @inject_tag: json:"layers"
	Layers map[int32]*SkillTreeLayer `protobuf:"bytes,2,rep,name=layers,proto3" json:"layers" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //点亮层
}

func (x *SkillTree) Reset() {
	*x = SkillTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_common_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillTree) ProtoMessage() {}

func (x *SkillTree) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_common_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillTree.ProtoReflect.Descriptor instead.
func (*SkillTree) Descriptor() ([]byte, []int) {
	return file_pb_proto_common_proto_rawDescGZIP(), []int{19}
}

func (x *SkillTree) GetExp() int32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *SkillTree) GetLayers() map[int32]*SkillTreeLayer {
	if x != nil {
		return x.Layers
	}
	return nil
}

type SkillTreeLayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"max_lighted"
	MaxLighted int32 `protobuf:"varint,1,opt,name=max_lighted,json=maxLighted,proto3" json:"max_lighted"` //可点亮数
	// @inject_tag: json:"skills"
	Skills []int32 `protobuf:"varint,2,rep,packed,name=skills,proto3" json:"skills"` //已点亮技能
}

func (x *SkillTreeLayer) Reset() {
	*x = SkillTreeLayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_common_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillTreeLayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillTreeLayer) ProtoMessage() {}

func (x *SkillTreeLayer) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_common_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillTreeLayer.ProtoReflect.Descriptor instead.
func (*SkillTreeLayer) Descriptor() ([]byte, []int) {
	return file_pb_proto_common_proto_rawDescGZIP(), []int{20}
}

func (x *SkillTreeLayer) GetMaxLighted() int32 {
	if x != nil {
		return x.MaxLighted
	}
	return 0
}

func (x *SkillTreeLayer) GetSkills() []int32 {
	if x != nil {
		return x.Skills
	}
	return nil
}

type PersonInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"person"
	Person *Person `protobuf:"bytes,1,opt,name=person,proto3" json:"person"` //族人
	// @inject_tag: json:"properties"
	Properties *PersonProperty `protobuf:"bytes,2,opt,name=properties,proto3" json:"properties"` //属性
}

func (x *PersonInfo) Reset() {
	*x = PersonInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_common_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersonInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonInfo) ProtoMessage() {}

func (x *PersonInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_common_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonInfo.ProtoReflect.Descriptor instead.
func (*PersonInfo) Descriptor() ([]byte, []int) {
	return file_pb_proto_common_proto_rawDescGZIP(), []int{21}
}

func (x *PersonInfo) GetPerson() *Person {
	if x != nil {
		return x.Person
	}
	return nil
}

func (x *PersonInfo) GetProperties() *PersonProperty {
	if x != nil {
		return x.Properties
	}
	return nil
}

type PlayerSoul struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"player_id"
	PlayerId int64 `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id"` //玩家ID
	// @inject_tag: json:"soul_id"
	SoulId int32 `protobuf:"varint,2,opt,name=soul_id,json=soulId,proto3" json:"soul_id"` //契约ID
	// @inject_tag: json:"quality"
	Quality int32 `protobuf:"varint,3,opt,name=quality,proto3" json:"quality"` //品质
	// @inject_tag: json:"sub_device_type"
	SubDeviceType int32 `protobuf:"varint,4,opt,name=sub_device_type,json=subDeviceType,proto3" json:"sub_device_type"` //武器
	// @inject_tag: json:"count"
	Count int32 `protobuf:"varint,5,opt,name=count,proto3" json:"count"` //数量
}

func (x *PlayerSoul) Reset() {
	*x = PlayerSoul{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_common_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSoul) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSoul) ProtoMessage() {}

func (x *PlayerSoul) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_common_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSoul.ProtoReflect.Descriptor instead.
func (*PlayerSoul) Descriptor() ([]byte, []int) {
	return file_pb_proto_common_proto_rawDescGZIP(), []int{22}
}

func (x *PlayerSoul) GetPlayerId() int64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *PlayerSoul) GetSoulId() int32 {
	if x != nil {
		return x.SoulId
	}
	return 0
}

func (x *PlayerSoul) GetQuality() int32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

func (x *PlayerSoul) GetSubDeviceType() int32 {
	if x != nil {
		return x.SubDeviceType
	}
	return 0
}

func (x *PlayerSoul) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type PersonSoul struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"person_id"
	PersonId int64 `protobuf:"varint,1,opt,name=person_id,json=personId,proto3" json:"person_id"` //族人ID
	// @inject_tag: json:"soul_id"
	SoulId int32 `protobuf:"varint,2,opt,name=soul_id,json=soulId,proto3" json:"soul_id"` //契约ID
	// @inject_tag: json:"quality"
	Quality int32 `protobuf:"varint,3,opt,name=quality,proto3" json:"quality"` //品质
	// @inject_tag: json:"sub_device_type"
	SubDeviceType int32 `protobuf:"varint,4,opt,name=sub_device_type,json=subDeviceType,proto3" json:"sub_device_type"` //武器
	// @inject_tag: json:"level"
	Level int32 `protobuf:"varint,5,opt,name=level,proto3" json:"level"` //契约等级
	// @inject_tag: json:"loaded"
	Loaded bool `protobuf:"varint,6,opt,name=loaded,proto3" json:"loaded"` //是否被装载
}

func (x *PersonSoul) Reset() {
	*x = PersonSoul{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_common_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersonSoul) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonSoul) ProtoMessage() {}

func (x *PersonSoul) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_common_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonSoul.ProtoReflect.Descriptor instead.
func (*PersonSoul) Descriptor() ([]byte, []int) {
	return file_pb_proto_common_proto_rawDescGZIP(), []int{23}
}

func (x *PersonSoul) GetPersonId() int64 {
	if x != nil {
		return x.PersonId
	}
	return 0
}

func (x *PersonSoul) GetSoulId() int32 {
	if x != nil {
		return x.SoulId
	}
	return 0
}

func (x *PersonSoul) GetQuality() int32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

func (x *PersonSoul) GetSubDeviceType() int32 {
	if x != nil {
		return x.SubDeviceType
	}
	return 0
}

func (x *PersonSoul) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *PersonSoul) GetLoaded() bool {
	if x != nil {
		return x.Loaded
	}
	return false
}

// 参战的角色
type FightPerson struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"person_id"
	PersonId int64 `protobuf:"varint,1,opt,name=person_id,json=personId,proto3" json:"person_id"`
	// @inject_tag: json:"positions"
	Positions []int32 `protobuf:"varint,2,rep,packed,name=positions,proto3" json:"positions"`
}

func (x *FightPerson) Reset() {
	*x = FightPerson{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_common_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightPerson) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightPerson) ProtoMessage() {}

func (x *FightPerson) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_common_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightPerson.ProtoReflect.Descriptor instead.
func (*FightPerson) Descriptor() ([]byte, []int) {
	return file_pb_proto_common_proto_rawDescGZIP(), []int{24}
}

func (x *FightPerson) GetPersonId() int64 {
	if x != nil {
		return x.PersonId
	}
	return 0
}

func (x *FightPerson) GetPositions() []int32 {
	if x != nil {
		return x.Positions
	}
	return nil
}

type LineupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"deployment_id"
	DeploymentId int32 `protobuf:"varint,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id"` //阵法Id
	// @inject_tag: json:"persons"
	Persons map[int32]*Person `protobuf:"bytes,2,rep,name=persons,proto3" json:"persons" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //参战族人 key:pos(1-9)
	// @inject_tag: json:"full_level"
	FullLevel map[int32]int32 `protobuf:"bytes,3,rep,name=full_level,json=fullLevel,proto3" json:"full_level" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` //满级属性
}

func (x *LineupInfo) Reset() {
	*x = LineupInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_common_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LineupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LineupInfo) ProtoMessage() {}

func (x *LineupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_common_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LineupInfo.ProtoReflect.Descriptor instead.
func (*LineupInfo) Descriptor() ([]byte, []int) {
	return file_pb_proto_common_proto_rawDescGZIP(), []int{25}
}

func (x *LineupInfo) GetDeploymentId() int32 {
	if x != nil {
		return x.DeploymentId
	}
	return 0
}

func (x *LineupInfo) GetPersons() map[int32]*Person {
	if x != nil {
		return x.Persons
	}
	return nil
}

func (x *LineupInfo) GetFullLevel() map[int32]int32 {
	if x != nil {
		return x.FullLevel
	}
	return nil
}

type Reward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"type"
	Type int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type"` // 0-货币，1-物品
	// @inject_tag: json:"id"
	Id int32 `protobuf:"varint,2,opt,name=id,proto3" json:"id"` //物品或货币ID
	// @inject_tag: json:"count"
	Count int32 `protobuf:"varint,3,opt,name=count,proto3" json:"count"` //数量
}

func (x *Reward) Reset() {
	*x = Reward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_common_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reward) ProtoMessage() {}

func (x *Reward) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_common_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reward.ProtoReflect.Descriptor instead.
func (*Reward) Descriptor() ([]byte, []int) {
	return file_pb_proto_common_proto_rawDescGZIP(), []int{26}
}

func (x *Reward) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Reward) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Reward) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type FightPersonInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"combat_id"
	CombatId int32 `protobuf:"varint,1,opt,name=combat_id,json=combatId,proto3" json:"combat_id"` //战斗中唯一id
	// @inject_tag: json:"person"
	Person *PersonInfo `protobuf:"bytes,2,opt,name=person,proto3" json:"person"`
	// @inject_tag: json:"positions"
	Positions []int32 `protobuf:"varint,3,rep,packed,name=positions,proto3" json:"positions"`
}

func (x *FightPersonInfo) Reset() {
	*x = FightPersonInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_common_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightPersonInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightPersonInfo) ProtoMessage() {}

func (x *FightPersonInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_common_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightPersonInfo.ProtoReflect.Descriptor instead.
func (*FightPersonInfo) Descriptor() ([]byte, []int) {
	return file_pb_proto_common_proto_rawDescGZIP(), []int{27}
}

func (x *FightPersonInfo) GetCombatId() int32 {
	if x != nil {
		return x.CombatId
	}
	return 0
}

func (x *FightPersonInfo) GetPerson() *PersonInfo {
	if x != nil {
		return x.Person
	}
	return nil
}

func (x *FightPersonInfo) GetPositions() []int32 {
	if x != nil {
		return x.Positions
	}
	return nil
}

type Cargo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"goods_id"
	GoodsId int32 `protobuf:"varint,1,opt,name=goods_id,json=goodsId,proto3" json:"goods_id"` //物品ID
	// @inject_tag: json:"count"
	Count int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count"` //数量
	// @inject_tag: json:"cost"
	Cost *Money `protobuf:"bytes,3,opt,name=cost,proto3" json:"cost"` //购入成本
}

func (x *Cargo) Reset() {
	*x = Cargo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_common_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cargo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cargo) ProtoMessage() {}

func (x *Cargo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_common_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cargo.ProtoReflect.Descriptor instead.
func (*Cargo) Descriptor() ([]byte, []int) {
	return file_pb_proto_common_proto_rawDescGZIP(), []int{28}
}

func (x *Cargo) GetGoodsId() int32 {
	if x != nil {
		return x.GoodsId
	}
	return 0
}

func (x *Cargo) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Cargo) GetCost() *Money {
	if x != nil {
		return x.Cost
	}
	return nil
}

type TradeTeamStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"path_len"
	PathLen int32 `protobuf:"varint,1,opt,name=path_len,json=pathLen,proto3" json:"path_len"` //路径长度
	// @inject_tag: json:"move_spend"
	MoveSpend int32 `protobuf:"varint,2,opt,name=move_spend,json=moveSpend,proto3" json:"move_spend"` //移动速度
	// @inject_tag: json:"water"
	Water int32 `protobuf:"varint,3,opt,name=water,proto3" json:"water"` //水
	// @inject_tag: json:"food"
	Food int32 `protobuf:"varint,4,opt,name=food,proto3" json:"food"` //食物
	// @inject_tag: json:"forage"
	Forage int32 `protobuf:"varint,5,opt,name=forage,proto3" json:"forage"` //草料
	// @inject_tag: json:"status"
	Status int32 `protobuf:"varint,6,opt,name=status,proto3" json:"status"` //状态（0-无贸易，1-设置路径，2-移动中，3-遭遇战斗）
	// @inject_tag: json:"to_build"
	ToBuild int32 `protobuf:"varint,7,opt,name=to_build,json=toBuild,proto3" json:"to_build"` //目的地
	// @inject_tag: json:"to_pos"
	ToPos int32 `protobuf:"varint,8,opt,name=to_pos,json=toPos,proto3" json:"to_pos"` //目的地位置
	// @inject_tag: json:"cur_build"
	CurBuild int32 `protobuf:"varint,9,opt,name=cur_build,json=curBuild,proto3" json:"cur_build"` //所有或出发城市
	// @inject_tag: json:"cur_pos"
	CurPos int32 `protobuf:"varint,10,opt,name=cur_pos,json=curPos,proto3" json:"cur_pos"` //当前所在位置
}

func (x *TradeTeamStatus) Reset() {
	*x = TradeTeamStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_common_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeTeamStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeTeamStatus) ProtoMessage() {}

func (x *TradeTeamStatus) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_common_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeTeamStatus.ProtoReflect.Descriptor instead.
func (*TradeTeamStatus) Descriptor() ([]byte, []int) {
	return file_pb_proto_common_proto_rawDescGZIP(), []int{29}
}

func (x *TradeTeamStatus) GetPathLen() int32 {
	if x != nil {
		return x.PathLen
	}
	return 0
}

func (x *TradeTeamStatus) GetMoveSpend() int32 {
	if x != nil {
		return x.MoveSpend
	}
	return 0
}

func (x *TradeTeamStatus) GetWater() int32 {
	if x != nil {
		return x.Water
	}
	return 0
}

func (x *TradeTeamStatus) GetFood() int32 {
	if x != nil {
		return x.Food
	}
	return 0
}

func (x *TradeTeamStatus) GetForage() int32 {
	if x != nil {
		return x.Forage
	}
	return 0
}

func (x *TradeTeamStatus) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *TradeTeamStatus) GetToBuild() int32 {
	if x != nil {
		return x.ToBuild
	}
	return 0
}

func (x *TradeTeamStatus) GetToPos() int32 {
	if x != nil {
		return x.ToPos
	}
	return 0
}

func (x *TradeTeamStatus) GetCurBuild() int32 {
	if x != nil {
		return x.CurBuild
	}
	return 0
}

func (x *TradeTeamStatus) GetCurPos() int32 {
	if x != nil {
		return x.CurPos
	}
	return 0
}

type TradeTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"carry"
	Carry int32 `protobuf:"varint,1,opt,name=carry,proto3" json:"carry"` //货物量
	// @inject_tag: json:"vehicle"
	Vehicle *Vehicle `protobuf:"bytes,4,opt,name=vehicle,proto3" json:"vehicle"` //交通工具
	// @inject_tag: json:"cargoes"
	Cargoes []*Cargo `protobuf:"bytes,5,rep,name=cargoes,proto3" json:"cargoes"` //货物
	// @inject_tag: json:"persons"
	Persons []*FightPerson `protobuf:"bytes,6,rep,name=persons,proto3" json:"persons"` //族人
	// @inject_tag: json:"trade_persons"
	TradePersons []*TradePerson `protobuf:"bytes,7,rep,name=trade_persons,json=tradePersons,proto3" json:"trade_persons"` //族人,前端展示
}

func (x *TradeTeam) Reset() {
	*x = TradeTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_common_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeTeam) ProtoMessage() {}

func (x *TradeTeam) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_common_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeTeam.ProtoReflect.Descriptor instead.
func (*TradeTeam) Descriptor() ([]byte, []int) {
	return file_pb_proto_common_proto_rawDescGZIP(), []int{30}
}

func (x *TradeTeam) GetCarry() int32 {
	if x != nil {
		return x.Carry
	}
	return 0
}

func (x *TradeTeam) GetVehicle() *Vehicle {
	if x != nil {
		return x.Vehicle
	}
	return nil
}

func (x *TradeTeam) GetCargoes() []*Cargo {
	if x != nil {
		return x.Cargoes
	}
	return nil
}

func (x *TradeTeam) GetPersons() []*FightPerson {
	if x != nil {
		return x.Persons
	}
	return nil
}

func (x *TradeTeam) GetTradePersons() []*TradePerson {
	if x != nil {
		return x.TradePersons
	}
	return nil
}

type TradePerson struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"person"
	Person *Person `protobuf:"bytes,1,opt,name=person,proto3" json:"person"`
	// @inject_tag: json:"positions"
	Positions []int32 `protobuf:"varint,2,rep,packed,name=positions,proto3" json:"positions"`
}

func (x *TradePerson) Reset() {
	*x = TradePerson{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_common_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradePerson) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradePerson) ProtoMessage() {}

func (x *TradePerson) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_common_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradePerson.ProtoReflect.Descriptor instead.
func (*TradePerson) Descriptor() ([]byte, []int) {
	return file_pb_proto_common_proto_rawDescGZIP(), []int{31}
}

func (x *TradePerson) GetPerson() *Person {
	if x != nil {
		return x.Person
	}
	return nil
}

func (x *TradePerson) GetPositions() []int32 {
	if x != nil {
		return x.Positions
	}
	return nil
}

type Vehicle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"level"
	Level int32 `protobuf:"varint,1,opt,name=level,proto3" json:"level"` //等级
	// @inject_tag: json:"name"
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"` //名称
	// @inject_tag: json:"speed"
	Speed int32 `protobuf:"varint,3,opt,name=speed,proto3" json:"speed"` //速度
	// @inject_tag: json:"duration"
	Duration int32 `protobuf:"varint,4,opt,name=duration,proto3" json:"duration"` //当前耐久度
	// @inject_tag: json:"duration_cut"
	DurationCut int32 `protobuf:"varint,5,opt,name=duration_cut,json=durationCut,proto3" json:"duration_cut"` //耐久度消耗（每移动一格消耗值）
	// @inject_tag: json:"forage"
	Forage int32 `protobuf:"varint,6,opt,name=forage,proto3" json:"forage"` //燃料消耗（每移动一格消耗值）
	// @inject_tag: json:"maintain"
	Maintain *Money `protobuf:"bytes,7,opt,name=maintain,proto3" json:"maintain"` //维护
	// （每修复一点耐久度需要的货币值,界面展示（100-duration）*maintain.count)
	// @inject_tag: json:"upgrade"
	Upgrade *Money `protobuf:"bytes,8,opt,name=upgrade,proto3" json:"upgrade"` //升级
	// @inject_tag: json:"carry"
	Carry int32 `protobuf:"varint,9,opt,name=carry,proto3" json:"carry"` //载货量
	// @inject_tag: json:"flee"
	Flee int32 `protobuf:"varint,10,opt,name=flee,proto3" json:"flee"` //逃跑概率
}

func (x *Vehicle) Reset() {
	*x = Vehicle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_common_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vehicle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vehicle) ProtoMessage() {}

func (x *Vehicle) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_common_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vehicle.ProtoReflect.Descriptor instead.
func (*Vehicle) Descriptor() ([]byte, []int) {
	return file_pb_proto_common_proto_rawDescGZIP(), []int{32}
}

func (x *Vehicle) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *Vehicle) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Vehicle) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *Vehicle) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Vehicle) GetDurationCut() int32 {
	if x != nil {
		return x.DurationCut
	}
	return 0
}

func (x *Vehicle) GetForage() int32 {
	if x != nil {
		return x.Forage
	}
	return 0
}

func (x *Vehicle) GetMaintain() *Money {
	if x != nil {
		return x.Maintain
	}
	return nil
}

func (x *Vehicle) GetUpgrade() *Money {
	if x != nil {
		return x.Upgrade
	}
	return nil
}

func (x *Vehicle) GetCarry() int32 {
	if x != nil {
		return x.Carry
	}
	return 0
}

func (x *Vehicle) GetFlee() int32 {
	if x != nil {
		return x.Flee
	}
	return 0
}

type PlayerGoods struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"id"
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"` //玩家物品ID
	// @inject_tag: json:"goods_id"
	GoodsId int32 `protobuf:"varint,2,opt,name=goods_id,json=goodsId,proto3" json:"goods_id"` //系统物品ID，标记一类物品
	// @inject_tag: json:"count"
	Count int32 `protobuf:"varint,3,opt,name=count,proto3" json:"count"` //数量
	// @inject_tag: json:"quality"
	Quality int32 `protobuf:"varint,4,opt,name=quality,proto3" json:"quality"` //品质
	// @inject_tag: json:"level"
	Level int32 `protobuf:"varint,5,opt,name=level,proto3" json:"level"` //仅装备时有等级
	// @inject_tag: json:"load_level"
	LoadLevel int32 `protobuf:"varint,6,opt,name=load_level,json=loadLevel,proto3" json:"load_level"` //装载限制等级
}

func (x *PlayerGoods) Reset() {
	*x = PlayerGoods{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_common_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerGoods) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerGoods) ProtoMessage() {}

func (x *PlayerGoods) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_common_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerGoods.ProtoReflect.Descriptor instead.
func (*PlayerGoods) Descriptor() ([]byte, []int) {
	return file_pb_proto_common_proto_rawDescGZIP(), []int{33}
}

func (x *PlayerGoods) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PlayerGoods) GetGoodsId() int32 {
	if x != nil {
		return x.GoodsId
	}
	return 0
}

func (x *PlayerGoods) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *PlayerGoods) GetQuality() int32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

func (x *PlayerGoods) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *PlayerGoods) GetLoadLevel() int32 {
	if x != nil {
		return x.LoadLevel
	}
	return 0
}

type Devices struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"devices"
	Devices map[int32]*PlayerGoods `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Devices) Reset() {
	*x = Devices{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_common_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devices) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devices) ProtoMessage() {}

func (x *Devices) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_common_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devices.ProtoReflect.Descriptor instead.
func (*Devices) Descriptor() ([]byte, []int) {
	return file_pb_proto_common_proto_rawDescGZIP(), []int{34}
}

func (x *Devices) GetDevices() map[int32]*PlayerGoods {
	if x != nil {
		return x.Devices
	}
	return nil
}

type KeyValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"values"
	Values map[int32]int32 `protobuf:"bytes,1,rep,name=values,proto3" json:"values" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *KeyValues) Reset() {
	*x = KeyValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_common_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValues) ProtoMessage() {}

func (x *KeyValues) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_common_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValues.ProtoReflect.Descriptor instead.
func (*KeyValues) Descriptor() ([]byte, []int) {
	return file_pb_proto_common_proto_rawDescGZIP(), []int{35}
}

func (x *KeyValues) GetValues() map[int32]int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

type Key64Values struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"values"
	Values map[int64]int32 `protobuf:"bytes,1,rep,name=values,proto3" json:"values" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *Key64Values) Reset() {
	*x = Key64Values{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_common_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Key64Values) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Key64Values) ProtoMessage() {}

func (x *Key64Values) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_common_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Key64Values.ProtoReflect.Descriptor instead.
func (*Key64Values) Descriptor() ([]byte, []int) {
	return file_pb_proto_common_proto_rawDescGZIP(), []int{36}
}

func (x *Key64Values) GetValues() map[int64]int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

type KeyFloatValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"values"
	Values map[int32]float32 `protobuf:"bytes,1,rep,name=values,proto3" json:"values" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
}

func (x *KeyFloatValues) Reset() {
	*x = KeyFloatValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_common_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyFloatValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyFloatValues) ProtoMessage() {}

func (x *KeyFloatValues) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_common_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyFloatValues.ProtoReflect.Descriptor instead.
func (*KeyFloatValues) Descriptor() ([]byte, []int) {
	return file_pb_proto_common_proto_rawDescGZIP(), []int{37}
}

func (x *KeyFloatValues) GetValues() map[int32]float32 {
	if x != nil {
		return x.Values
	}
	return nil
}

type IMData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"userID"
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id"`
	// @inject_tag: json:"token"
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token"`
	// @inject_tag: json:"expiredTime"
	ExpiredTime int64 `protobuf:"varint,3,opt,name=expired_time,json=expiredTime,proto3" json:"expired_time"`
}

func (x *IMData) Reset() {
	*x = IMData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_proto_common_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMData) ProtoMessage() {}

func (x *IMData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_common_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMData.ProtoReflect.Descriptor instead.
func (*IMData) Descriptor() ([]byte, []int) {
	return file_pb_proto_common_proto_rawDescGZIP(), []int{38}
}

func (x *IMData) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *IMData) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *IMData) GetExpiredTime() int64 {
	if x != nil {
		return x.ExpiredTime
	}
	return 0
}

var File_pb_proto_common_proto protoreflect.FileDescriptor

var file_pb_proto_common_proto_rawDesc = []byte{
	0x0a, 0x15, 0x70, 0x62, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x22, 0x26, 0x0a, 0x06, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0xc9, 0x02, 0x0a, 0x0a, 0x42, 0x61, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x62, 0x61, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x72, 0x61, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x02, 0x69, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70,
	0x62, 0x2e, 0x49, 0x4d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x02, 0x69, 0x6d, 0x22, 0x21, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e,
	0x65, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x10, 0x01, 0x22,
	0xa1, 0x02, 0x0a, 0x05, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d,
	0x61, 0x78, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x6f,
	0x6d, 0x62, 0x61, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x63, 0x6f,
	0x6d, 0x62, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c,
	0x79, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6d, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6d, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x22, 0x82, 0x01, 0x0a, 0x0b, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x09, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x09, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x22, 0x88, 0x03, 0x0a, 0x05, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x75, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x75, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x73, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x05, 0x70, 0x6f, 0x73, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x6e, 0x65, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x58, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x65, 0x72,
	0x67, 0x69, 0x6e, 0x67, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x10, 0x05, 0x22, 0x3d, 0x0a, 0x0a, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x31, 0x0a, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf0, 0x01, 0x0a, 0x0b, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43,
	0x6f, 0x6d, 0x62, 0x61, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x6b, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6e,
	0x65, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x6e, 0x65, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xaf, 0x02, 0x0a, 0x04, 0x41, 0x72, 0x6d,
	0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x72, 0x6d, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x65,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x65,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x52, 0x06, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x09, 0x61, 0x72,
	0x6d, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x70, 0x62, 0x2e, 0x41, 0x72, 0x6d, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x61, 0x72, 0x6d,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x6f,
	0x6c, 0x64, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9b, 0x02, 0x0a, 0x08, 0x41,
	0x72, 0x6d, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x72, 0x6d, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x72, 0x6d, 0x79, 0x49, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70,
	0x6f, 0x73, 0x12, 0x26, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x06, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6f,
	0x6c, 0x64, 0x69, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x65, 0x6e,
	0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x73,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x65, 0x67, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x69, 0x65, 0x67, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x12, 0x25, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52,
	0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0x90, 0x01, 0x0a, 0x08, 0x4d, 0x6f, 0x76,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x70, 0x6f,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x6f, 0x73,
	0x12, 0x15, 0x0a, 0x06, 0x74, 0x6f, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x74, 0x6f, 0x50, 0x6f, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x76, 0x65,
	0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x6f,
	0x76, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x9b, 0x01, 0x0a, 0x08,
	0x4c, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x6d, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x72, 0x6d, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x72, 0x6d, 0x79, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x72, 0x6d, 0x79, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a,
	0x04, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62,
	0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6d, 0x6f, 0x76, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x22, 0xa6, 0x01, 0x0a, 0x0d, 0x4c, 0x61,
	0x6e, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x04, 0x6d, 0x6f, 0x76, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x6f, 0x76, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x62, 0x2e,
	0x4c, 0x61, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x24, 0x0a, 0x06,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x6f, 0x76, 0x69, 0x6e, 0x67,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x65, 0x65, 0x74, 0x52, 0x6f, 0x62, 0x62, 0x65, 0x72,
	0x10, 0x01, 0x22, 0x8d, 0x02, 0x0a, 0x06, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64,
	0x6e, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x6e, 0x61, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x63,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x23, 0x0a, 0x07, 0x64, 0x6f, 0x5f, 0x77, 0x68, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x6f, 0x57, 0x68, 0x61, 0x74, 0x52, 0x06,
	0x64, 0x6f, 0x57, 0x68, 0x61, 0x74, 0x12, 0x2a, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x22, 0x94, 0x01, 0x0a, 0x0c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x4b, 0x0a, 0x0c,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x70, 0x62, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd4, 0x0d, 0x0a, 0x0e, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69, 0x72, 0x74,
	0x68, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x69,
	0x72, 0x74, 0x68, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x70, 0x69,
	0x72, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x70, 0x69, 0x72, 0x69,
	0x74, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x70, 0x69, 0x72, 0x69, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x70, 0x69,
	0x72, 0x69, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x6f, 0x6d, 0x62, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x6f, 0x6d,
	0x62, 0x61, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x65,
	0x64, 0x75, 0x63, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x75,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x45, 0x78, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x52, 0x0a, 0x10, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70,
	0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x04, 0x61, 0x72, 0x6d, 0x73, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2e, 0x41, 0x72, 0x6d, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x04, 0x61, 0x72, 0x6d, 0x73, 0x12, 0x42, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70,
	0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x05,
	0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x62,
	0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2e,
	0x57, 0x6f, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x77, 0x6f, 0x72, 0x64,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x5f, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74,
	0x57, 0x6f, 0x72, 0x64, 0x12, 0x40, 0x0a, 0x0a, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x6f, 0x75,
	0x6c, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2e, 0x4c, 0x6f, 0x61,
	0x64, 0x53, 0x6f, 0x75, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6c, 0x6f, 0x61,
	0x64, 0x53, 0x6f, 0x75, 0x6c, 0x73, 0x12, 0x43, 0x0a, 0x0b, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f,
	0x74, 0x72, 0x65, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x62,
	0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2e,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x72, 0x65, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0a, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x72, 0x65, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x06, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x62,
	0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2e,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x73, 0x12, 0x33, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x14, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x43, 0x0a, 0x0b, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x70, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0a, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x59, 0x0a,
	0x13, 0x73, 0x75, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6f, 0x66, 0x5f,
	0x61, 0x72, 0x6d, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x62, 0x2e,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2e, 0x53,
	0x75, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4f, 0x66, 0x41, 0x72, 0x6d, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x73, 0x75, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x4f, 0x66, 0x41, 0x72, 0x6d, 0x73, 0x1a, 0x42, 0x0a, 0x14, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4b, 0x0a, 0x09,
	0x41, 0x72, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e,
	0x4b, 0x65, 0x79, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x0a, 0x57, 0x6f, 0x72, 0x64,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x57, 0x6f, 0x72,
	0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4a, 0x0a, 0x0e,
	0x4c, 0x6f, 0x61, 0x64, 0x53, 0x6f, 0x75, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x22, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x6f, 0x75, 0x6c, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4c, 0x0a, 0x0f, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x54, 0x72, 0x65, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x23, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x62, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x72, 0x65, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4c, 0x0a, 0x0f, 0x4c,
	0x6f, 0x61, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x23, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x55, 0x0a, 0x16, 0x53, 0x75, 0x69,
	0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4f, 0x66, 0x41, 0x72, 0x6d, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x75, 0x69, 0x74, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xf2, 0x01, 0x0a, 0x04, 0x57, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x38, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x57, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x61, 0x0a, 0x08, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x6f, 0x75,
	0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x17, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x75,
	0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73,
	0x6f, 0x75, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x47, 0x0a, 0x09, 0x4c, 0x6f, 0x61, 0x64,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x22, 0x9f, 0x01, 0x0a, 0x09, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x72, 0x65, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x65, 0x78,
	0x70, 0x12, 0x31, 0x0a, 0x06, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x72, 0x65, 0x65,
	0x2e, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x1a, 0x4d, 0x0a, 0x0b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x54,
	0x72, 0x65, 0x65, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x49, 0x0a, 0x0e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x72, 0x65, 0x65,
	0x4c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x4c,
	0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x22, 0x64,
	0x0a, 0x0a, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x06,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70,
	0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x12, 0x32, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53,
	0x6f, 0x75, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x6c, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x75,
	0x62, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xb2, 0x01, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x6c,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x73, 0x6f, 0x75, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x6c, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x26, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x16,
	0x0a, 0x06, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x22, 0x48, 0x0a, 0x0b, 0x46, 0x69, 0x67, 0x68, 0x74, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0xac, 0x02, 0x0a, 0x0a, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x75,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x0a, 0x66,
	0x75, 0x6c, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x46, 0x75, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09,
	0x66, 0x75, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x1a, 0x46, 0x0a, 0x0c, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x46, 0x75, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x42, 0x0a, 0x06, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x74, 0x0a, 0x0f, 0x46, 0x69, 0x67, 0x68, 0x74, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x62, 0x61, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x62, 0x61,
	0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x06, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x57, 0x0a, 0x05, 0x43, 0x61, 0x72,
	0x67, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x04, 0x63, 0x6f,
	0x73, 0x74, 0x22, 0x8d, 0x02, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x65, 0x61, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6c,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61, 0x74, 0x68, 0x4c, 0x65,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x70, 0x65, 0x6e, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x77, 0x61, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x77, 0x61, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6f, 0x6f, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x66, 0x6f, 0x6f, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f,
	0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x6f,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x6f, 0x5f, 0x70, 0x6f, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x50, 0x6f, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x75, 0x72, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x63, 0x75, 0x72, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x75, 0x72,
	0x5f, 0x70, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x75, 0x72, 0x50,
	0x6f, 0x73, 0x22, 0xce, 0x01, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x65, 0x61, 0x6d,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x72, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x61, 0x72, 0x72, 0x79, 0x12, 0x25, 0x0a, 0x07, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x52, 0x07, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x23, 0x0a,
	0x07, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x72, 0x67, 0x6f, 0x52, 0x07, 0x63, 0x61, 0x72, 0x67, 0x6f,
	0x65, 0x73, 0x12, 0x29, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x52, 0x07, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a,
	0x0d, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x65, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x73, 0x22, 0x4f, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x06,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x96, 0x02, 0x0a, 0x07, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x66, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x08, 0x6d, 0x61, 0x69, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x52, 0x08, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x12, 0x23,
	0x0a, 0x07, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x07, 0x75, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x72, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x61, 0x72, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x65,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x66, 0x6c, 0x65, 0x65, 0x22, 0x9d, 0x01,
	0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1d,
	0x0a, 0x0a, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x8a, 0x01,
	0x0a, 0x07, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x62, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x4b, 0x0a,
	0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x70, 0x62, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x79, 0x0a, 0x09, 0x4b, 0x65,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x4b, 0x65, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7d, 0x0a, 0x0b, 0x4b, 0x65, 0x79, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x4b, 0x65, 0x79, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x83, 0x01, 0x0a, 0x0e, 0x4b, 0x65, 0x79, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x4b, 0x65, 0x79,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a,
	0x39, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5a, 0x0a, 0x06, 0x49, 0x4d,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x2a, 0xd2, 0x08, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x4d, 0x79, 0x73, 0x71, 0x6c, 0x45, 0x72, 0x72, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x72,
	0x6d, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0x02,
	0x12, 0x12, 0x0a, 0x0e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x6f, 0x74,
	0x45, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x4e, 0x6f, 0x74, 0x45, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x10, 0x06,
	0x12, 0x10, 0x0a, 0x0c, 0x41, 0x72, 0x6d, 0x79, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x72, 0x6d, 0x79, 0x49, 0x73, 0x42, 0x75, 0x73, 0x79,
	0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x72, 0x6d, 0x79, 0x43, 0x61, 0x70, 0x74, 0x61, 0x69,
	0x6e, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x4e,
	0x6f, 0x74, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x57, 0x61, 0x72, 0x10, 0x0b, 0x12, 0x0c,
	0x0a, 0x08, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x57, 0x61, 0x72, 0x10, 0x0c, 0x12, 0x14, 0x0a, 0x10,
	0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x10, 0x0d, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x53, 0x65, 0x6c, 0x66,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x10, 0x0e, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x65, 0x63, 0x6c, 0x61,
	0x72, 0x65, 0x4f, 0x72, 0x49, 0x6e, 0x57, 0x61, 0x72, 0x10, 0x0f, 0x12, 0x0c, 0x0a, 0x08, 0x4e,
	0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x10, 0x10, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x6e, 0x4c,
	0x6f, 0x61, 0x64, 0x10, 0x11, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x6f, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x10, 0x12, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x6f, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x10, 0x13, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x49, 0x73, 0x42, 0x75, 0x73, 0x79, 0x10, 0x14, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x61, 0x78, 0x53,
	0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x15, 0x12, 0x11, 0x0a,
	0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x10, 0x16,
	0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x6f, 0x44, 0x72, 0x61, 0x77, 0x53, 0x6f, 0x75, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x10, 0x17, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x10, 0x18, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x6f, 0x75, 0x6c, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x10, 0x19, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x6c, 0x49, 0x73, 0x4c, 0x6f,
	0x61, 0x64, 0x10, 0x1a, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x10, 0x1b, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x78, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x10, 0x1c, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x10, 0x1d, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69,
	0x74, 0x79, 0x10, 0x1e, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x6f, 0x47, 0x69, 0x66, 0x74, 0x10, 0x1f,
	0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x41, 0x72, 0x6d, 0x73, 0x10, 0x20,
	0x12, 0x10, 0x0a, 0x0c, 0x41, 0x72, 0x6d, 0x73, 0x4e, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x10, 0x21, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x72, 0x65, 0x61, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x49,
	0x73, 0x42, 0x75, 0x73, 0x79, 0x10, 0x22, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x10, 0x23, 0x12, 0x16, 0x0a,
	0x12, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x74, 0x45, 0x6e, 0x6f,
	0x75, 0x67, 0x68, 0x10, 0x24, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x10, 0x25, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x70, 0x4d, 0x61, 0x78, 0x43, 0x61,
	0x72, 0x72, 0x79, 0x10, 0x26, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x6f, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x10, 0x27, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x6f, 0x43, 0x61, 0x72, 0x67, 0x6f,
	0x10, 0x28, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x61,
	0x74, 0x68, 0x10, 0x29, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x61, 0x6e, 0x4e, 0x6f, 0x74, 0x50, 0x75,
	0x72, 0x43, 0x68, 0x61, 0x73, 0x65, 0x10, 0x2a, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x65, 0x61, 0x63,
	0x68, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0x2b, 0x12, 0x0f, 0x0a,
	0x0b, 0x45, 0x64, 0x75, 0x63, 0x61, 0x74, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x10, 0x2c, 0x12, 0x10,
	0x0a, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x10, 0x2d,
	0x12, 0x16, 0x0a, 0x12, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f,
	0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0x2e, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x65, 0x73, 0x73,
	0x54, 0x68, 0x61, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x10, 0x2f, 0x12,
	0x12, 0x0a, 0x0e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x45, 0x6e, 0x6f, 0x75, 0x67,
	0x68, 0x10, 0x30, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x72, 0x65, 0x65,
	0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0x31, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x54, 0x72, 0x65, 0x65, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x72, 0x72, 0x10,
	0x32, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x72, 0x65, 0x65, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x45, 0x72, 0x72, 0x10, 0x33, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x10, 0x34,
	0x12, 0x11, 0x0a, 0x0d, 0x55, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x10, 0x35, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x4d,
	0x65, 0x72, 0x67, 0x65, 0x10, 0x36, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x50, 0x72, 0x65,
	0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x10, 0x37, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x10, 0x38, 0x12, 0x10,
	0x0a, 0x0c, 0x4e, 0x6f, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x10, 0x39,
	0x12, 0x0f, 0x0a, 0x0b, 0x57, 0x6f, 0x72, 0x64, 0x4e, 0x6f, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10,
	0x3a, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10,
	0x3b, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x61, 0x69, 0x6c, 0x10, 0x64, 0x2a, 0x1e, 0x0a, 0x06, 0x47,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x65, 0x6d, 0x61, 0x6c, 0x65, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x61, 0x6c, 0x65, 0x10, 0x01, 0x2a, 0x39, 0x0a, 0x09, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x72, 0x65, 0x73,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x56, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x10, 0x64, 0x2a, 0x3d, 0x0a, 0x0a, 0x41, 0x72, 0x6d, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x64, 0x6c, 0x65, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x4d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x6f,
	0x6d, 0x62, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x65, 0x66,
	0x65, 0x61, 0x74, 0x10, 0x03, 0x2a, 0x4c, 0x0a, 0x08, 0x41, 0x72, 0x6d, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x65, 0x66, 0x65, 0x61, 0x74, 0x41, 0x72, 0x6d, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x69, 0x64, 0x65, 0x72, 0x10, 0x01,
	0x12, 0x09, 0x0a, 0x05, 0x53, 0x61, 0x62, 0x65, 0x72, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4c,
	0x61, 0x6e, 0x63, 0x65, 0x72, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x72, 0x63, 0x68, 0x65,
	0x72, 0x10, 0x04, 0x2a, 0x6d, 0x0a, 0x0a, 0x41, 0x72, 0x6d, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x42, 0x79, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x47, 0x6f, 0x74, 0x6f, 0x57, 0x61, 0x72, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x47,
	0x6f, 0x74, 0x6f, 0x43, 0x69, 0x74, 0x79, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x6f, 0x74,
	0x6f, 0x57, 0x61, 0x72, 0x4e, 0x6f, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x10, 0x03, 0x12,
	0x0f, 0x0a, 0x0b, 0x41, 0x41, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x04,
	0x12, 0x10, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x10, 0x05, 0x2a, 0x4d, 0x0a, 0x06, 0x44, 0x6f, 0x57, 0x68, 0x61, 0x74, 0x12, 0x0d, 0x0a, 0x09,
	0x44, 0x6f, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43,
	0x68, 0x69, 0x6c, 0x64, 0x68, 0x6f, 0x6f, 0x64, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x65,
	0x61, 0x64, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x6e, 0x41, 0x72, 0x6d, 0x79, 0x10, 0x03,
	0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x10,
	0x04, 0x2a, 0x30, 0x0a, 0x0b, 0x53, 0x75, 0x69, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x05, 0x0a, 0x01, 0x53, 0x10, 0x00, 0x12, 0x05, 0x0a, 0x01, 0x41, 0x10, 0x01, 0x12, 0x05,
	0x0a, 0x01, 0x42, 0x10, 0x02, 0x12, 0x05, 0x0a, 0x01, 0x43, 0x10, 0x03, 0x12, 0x05, 0x0a, 0x01,
	0x44, 0x10, 0x04, 0x42, 0x08, 0x5a, 0x06, 0x2f, 0x70, 0x62, 0x3b, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pb_proto_common_proto_rawDescOnce sync.Once
	file_pb_proto_common_proto_rawDescData = file_pb_proto_common_proto_rawDesc
)

func file_pb_proto_common_proto_rawDescGZIP() []byte {
	file_pb_proto_common_proto_rawDescOnce.Do(func() {
		file_pb_proto_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_proto_common_proto_rawDescData)
	})
	return file_pb_proto_common_proto_rawDescData
}

var file_pb_proto_common_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_pb_proto_common_proto_msgTypes = make([]protoimpl.MessageInfo, 58)
var file_pb_proto_common_proto_goTypes = []interface{}{
	(Code)(0),                 // 0: pb.Code
	(Gender)(0),               // 1: pb.Gender
	(Authority)(0),            // 2: pb.Authority
	(ArmyStatus)(0),           // 3: pb.ArmyStatus
	(ArmyType)(0),             // 4: pb.ArmyType
	(ArmyAction)(0),           // 5: pb.ArmyAction
	(DoWhat)(0),               // 6: pb.DoWhat
	(Suitability)(0),          // 7: pb.Suitability
	(BasePlayer_Status)(0),    // 8: pb.BasePlayer.Status
	(Build_Status)(0),         // 9: pb.Build.Status
	(LandTradeTeam_Action)(0), // 10: pb.LandTradeTeam.Action
	(*Result)(nil),            // 11: pb.Result
	(*BasePlayer)(nil),        // 12: pb.BasePlayer
	(*Guild)(nil),             // 13: pb.Guild
	(*GuildMember)(nil),       // 14: pb.GuildMember
	(*Build)(nil),             // 15: pb.Build
	(*GoodsCount)(nil),        // 16: pb.GoodsCount
	(*Money)(nil),             // 17: pb.Money
	(*GuildCombat)(nil),       // 18: pb.GuildCombat
	(*Army)(nil),              // 19: pb.Army
	(*ArmyUnit)(nil),          // 20: pb.ArmyUnit
	(*MoveInfo)(nil),          // 21: pb.MoveInfo
	(*LandArmy)(nil),          // 22: pb.LandArmy
	(*LandTradeTeam)(nil),     // 23: pb.LandTradeTeam
	(*Person)(nil),            // 24: pb.Person
	(*PersonDevice)(nil),      // 25: pb.PersonDevice
	(*PersonProperty)(nil),    // 26: pb.PersonProperty
	(*Word)(nil),              // 27: pb.Word
	(*LoadSoul)(nil),          // 28: pb.LoadSoul
	(*LoadSkill)(nil),         // 29: pb.LoadSkill
	(*SkillTree)(nil),         // 30: pb.SkillTree
	(*SkillTreeLayer)(nil),    // 31: pb.SkillTreeLayer
	(*PersonInfo)(nil),        // 32: pb.PersonInfo
	(*PlayerSoul)(nil),        // 33: pb.PlayerSoul
	(*PersonSoul)(nil),        // 34: pb.PersonSoul
	(*FightPerson)(nil),       // 35: pb.FightPerson
	(*LineupInfo)(nil),        // 36: pb.LineupInfo
	(*Reward)(nil),            // 37: pb.Reward
	(*FightPersonInfo)(nil),   // 38: pb.FightPersonInfo
	(*Cargo)(nil),             // 39: pb.Cargo
	(*TradeTeamStatus)(nil),   // 40: pb.TradeTeamStatus
	(*TradeTeam)(nil),         // 41: pb.TradeTeam
	(*TradePerson)(nil),       // 42: pb.TradePerson
	(*Vehicle)(nil),           // 43: pb.Vehicle
	(*PlayerGoods)(nil),       // 44: pb.PlayerGoods
	(*Devices)(nil),           // 45: pb.Devices
	(*KeyValues)(nil),         // 46: pb.KeyValues
	(*Key64Values)(nil),       // 47: pb.Key64Values
	(*KeyFloatValues)(nil),    // 48: pb.KeyFloatValues
	(*IMData)(nil),            // 49: pb.IMData
	nil,                       // 50: pb.PersonDevice.DevicesEntry
	nil,                       // 51: pb.PersonProperty.PointPropertiesEntry
	nil,                       // 52: pb.PersonProperty.ArmsEntry
	nil,                       // 53: pb.PersonProperty.PropertiesEntry
	nil,                       // 54: pb.PersonProperty.WordsEntry
	nil,                       // 55: pb.PersonProperty.LoadSoulsEntry
	nil,                       // 56: pb.PersonProperty.SkillTreesEntry
	nil,                       // 57: pb.PersonProperty.RatiosEntry
	nil,                       // 58: pb.PersonProperty.ExtraEntry
	nil,                       // 59: pb.PersonProperty.LoadSkillsEntry
	nil,                       // 60: pb.PersonProperty.SuitabilityOfArmsEntry
	nil,                       // 61: pb.Word.PropertiesEntry
	nil,                       // 62: pb.SkillTree.LayersEntry
	nil,                       // 63: pb.LineupInfo.PersonsEntry
	nil,                       // 64: pb.LineupInfo.FullLevelEntry
	nil,                       // 65: pb.Devices.DevicesEntry
	nil,                       // 66: pb.KeyValues.ValuesEntry
	nil,                       // 67: pb.Key64Values.ValuesEntry
	nil,                       // 68: pb.KeyFloatValues.ValuesEntry
}
var file_pb_proto_common_proto_depIdxs = []int32{
	0,  // 0: pb.Result.code:type_name -> pb.Code
	1,  // 1: pb.BasePlayer.gender:type_name -> pb.Gender
	8,  // 2: pb.BasePlayer.status:type_name -> pb.BasePlayer.Status
	49, // 3: pb.BasePlayer.im:type_name -> pb.IMData
	12, // 4: pb.GuildMember.player:type_name -> pb.BasePlayer
	2,  // 5: pb.GuildMember.authority:type_name -> pb.Authority
	9,  // 6: pb.Build.status:type_name -> pb.Build.Status
	3,  // 7: pb.Army.status:type_name -> pb.ArmyStatus
	24, // 8: pb.Army.person:type_name -> pb.Person
	4,  // 9: pb.Army.army_type:type_name -> pb.ArmyType
	32, // 10: pb.ArmyUnit.person:type_name -> pb.PersonInfo
	45, // 11: pb.ArmyUnit.devices:type_name -> pb.Devices
	5,  // 12: pb.LandArmy.action:type_name -> pb.ArmyAction
	21, // 13: pb.LandArmy.move:type_name -> pb.MoveInfo
	21, // 14: pb.LandTradeTeam.move:type_name -> pb.MoveInfo
	10, // 15: pb.LandTradeTeam.action:type_name -> pb.LandTradeTeam.Action
	6,  // 16: pb.Person.do_what:type_name -> pb.DoWhat
	25, // 17: pb.Person.devices:type_name -> pb.PersonDevice
	50, // 18: pb.PersonDevice.devices:type_name -> pb.PersonDevice.DevicesEntry
	51, // 19: pb.PersonProperty.point_properties:type_name -> pb.PersonProperty.PointPropertiesEntry
	52, // 20: pb.PersonProperty.arms:type_name -> pb.PersonProperty.ArmsEntry
	53, // 21: pb.PersonProperty.properties:type_name -> pb.PersonProperty.PropertiesEntry
	54, // 22: pb.PersonProperty.words:type_name -> pb.PersonProperty.WordsEntry
	55, // 23: pb.PersonProperty.load_souls:type_name -> pb.PersonProperty.LoadSoulsEntry
	56, // 24: pb.PersonProperty.skill_trees:type_name -> pb.PersonProperty.SkillTreesEntry
	57, // 25: pb.PersonProperty.ratios:type_name -> pb.PersonProperty.RatiosEntry
	58, // 26: pb.PersonProperty.extra:type_name -> pb.PersonProperty.ExtraEntry
	59, // 27: pb.PersonProperty.load_skills:type_name -> pb.PersonProperty.LoadSkillsEntry
	60, // 28: pb.PersonProperty.suitability_of_arms:type_name -> pb.PersonProperty.SuitabilityOfArmsEntry
	61, // 29: pb.Word.properties:type_name -> pb.Word.PropertiesEntry
	62, // 30: pb.SkillTree.layers:type_name -> pb.SkillTree.LayersEntry
	24, // 31: pb.PersonInfo.person:type_name -> pb.Person
	26, // 32: pb.PersonInfo.properties:type_name -> pb.PersonProperty
	63, // 33: pb.LineupInfo.persons:type_name -> pb.LineupInfo.PersonsEntry
	64, // 34: pb.LineupInfo.full_level:type_name -> pb.LineupInfo.FullLevelEntry
	32, // 35: pb.FightPersonInfo.person:type_name -> pb.PersonInfo
	17, // 36: pb.Cargo.cost:type_name -> pb.Money
	43, // 37: pb.TradeTeam.vehicle:type_name -> pb.Vehicle
	39, // 38: pb.TradeTeam.cargoes:type_name -> pb.Cargo
	35, // 39: pb.TradeTeam.persons:type_name -> pb.FightPerson
	42, // 40: pb.TradeTeam.trade_persons:type_name -> pb.TradePerson
	24, // 41: pb.TradePerson.person:type_name -> pb.Person
	17, // 42: pb.Vehicle.maintain:type_name -> pb.Money
	17, // 43: pb.Vehicle.upgrade:type_name -> pb.Money
	65, // 44: pb.Devices.devices:type_name -> pb.Devices.DevicesEntry
	66, // 45: pb.KeyValues.values:type_name -> pb.KeyValues.ValuesEntry
	67, // 46: pb.Key64Values.values:type_name -> pb.Key64Values.ValuesEntry
	68, // 47: pb.KeyFloatValues.values:type_name -> pb.KeyFloatValues.ValuesEntry
	44, // 48: pb.PersonDevice.DevicesEntry.value:type_name -> pb.PlayerGoods
	48, // 49: pb.PersonProperty.ArmsEntry.value:type_name -> pb.KeyFloatValues
	27, // 50: pb.PersonProperty.WordsEntry.value:type_name -> pb.Word
	28, // 51: pb.PersonProperty.LoadSoulsEntry.value:type_name -> pb.LoadSoul
	30, // 52: pb.PersonProperty.SkillTreesEntry.value:type_name -> pb.SkillTree
	29, // 53: pb.PersonProperty.LoadSkillsEntry.value:type_name -> pb.LoadSkill
	7,  // 54: pb.PersonProperty.SuitabilityOfArmsEntry.value:type_name -> pb.Suitability
	31, // 55: pb.SkillTree.LayersEntry.value:type_name -> pb.SkillTreeLayer
	24, // 56: pb.LineupInfo.PersonsEntry.value:type_name -> pb.Person
	44, // 57: pb.Devices.DevicesEntry.value:type_name -> pb.PlayerGoods
	58, // [58:58] is the sub-list for method output_type
	58, // [58:58] is the sub-list for method input_type
	58, // [58:58] is the sub-list for extension type_name
	58, // [58:58] is the sub-list for extension extendee
	0,  // [0:58] is the sub-list for field type_name
}

func init() { file_pb_proto_common_proto_init() }
func file_pb_proto_common_proto_init() {
	if File_pb_proto_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pb_proto_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasePlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Guild); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Build); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoodsCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Money); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_common_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildCombat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_common_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Army); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_common_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArmyUnit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_common_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_common_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LandArmy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_common_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LandTradeTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_common_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Person); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_common_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersonDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_common_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersonProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_common_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Word); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_common_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadSoul); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_common_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadSkill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_common_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_common_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillTreeLayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_common_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersonInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_common_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerSoul); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_common_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersonSoul); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_common_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FightPerson); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_common_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LineupInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_common_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_common_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FightPersonInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_common_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cargo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_common_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeTeamStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_common_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_common_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradePerson); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_common_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vehicle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_common_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerGoods); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_common_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devices); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_common_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_common_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Key64Values); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_common_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyFloatValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_proto_common_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_proto_common_proto_rawDesc,
			NumEnums:      11,
			NumMessages:   58,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pb_proto_common_proto_goTypes,
		DependencyIndexes: file_pb_proto_common_proto_depIdxs,
		EnumInfos:         file_pb_proto_common_proto_enumTypes,
		MessageInfos:      file_pb_proto_common_proto_msgTypes,
	}.Build()
	File_pb_proto_common_proto = out.File
	file_pb_proto_common_proto_rawDesc = nil
	file_pb_proto_common_proto_goTypes = nil
	file_pb_proto_common_proto_depIdxs = nil
}
